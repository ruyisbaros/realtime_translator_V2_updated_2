WEBVTT

00:00:00.000 --> 00:00:06.000
Merhaba ve React Setup konusundaki ikinci bölümün tanıtımına hoşgeldiniz.

00:00:06.000 --> 00:00:15.000
Benim adım David Losart, yazılım mühendisi ve 10 yılı aşkın bir süredir internette seyahat ediyorum ve şimdi de 4 yıldır React ile çalışıyorum.

00:00:15.000 --> 00:00:24.000
React'ın yanı sıra JavaScript, TypeScript, Node.js, Linux sunucuları, Docker ve AWS ile çalışmayı seviyorum.

00:00:24.000 --> 00:00:34.000
Bu nedenle, bugünkü sonuç tamamen bir gelişme ortamı kurmak ve orada ilk React Hello World uygulamasını uygulamakla ilgilidir.

00:00:34.000 --> 00:00:45.000
Kısa bir şekilde hatırladığımızda, son bölümde React'in hikayesini ve ilkelerini kısa bir şekilde tanıttım ve sanal dom ve JSX'e ilk teorik bir bakış açısı verdim.

00:00:46.000 --> 00:00:57.000
Biz sanal dom bir abstraksiyon olduğunu hatırlıyoruz, React dom senkronize etmek için kullanılır.

00:00:57.000 --> 00:01:05.000
Ve sanal dom, bir yandan deklaratif programlama yapmamıza izin verir ve diğer yandan bazı performans avantajları sunar.

00:01:05.000 --> 00:01:13.000
Bu nedenle, şu anda bir geliştirme ortamı oluşturmak istiyoruz. ben Visual Studio Code kullanıyorum.

00:01:13.000 --> 00:01:21.000
Npm, npx ve Babel ile ilk bir araç kümesi inceleyeceğiz, bu da React uygulamalarını geliştirmemize yardımcı olacaktır.

00:01:21.000 --> 00:01:32.000
Ve elbette ilk React uygulamasını uygulayacağız ve React Element'i, React ve JSX'in nükleer oluşum blokunu kullanacağız.

00:01:32.000 --> 00:01:39.000
Bu noktada belki kısa bir şekilde fark edeceksiniz, son kez React Components hakkında çok şey söyledim.

00:01:39.000 --> 00:01:52.000
React bileşenleri React Element ile karıştırılmamalıdır.Ama şimdi bu bölümde ilk olarak React Element'i sunuyorum, çünkü react'in aslında atom yapısı olan temel veya atom yapısıdır.

00:01:52.000 --> 00:02:04.000
Ve React Element, JSX'den biraz da büyüyü alır. çünkü ilk kez JSX'i gördüğünüzde, sahnelerin arkasında nasıl çalıştığını hızlı bir şekilde merak edebilirsiniz.

00:02:04.000 --> 00:02:11.000
Ve React Element nihayetinde sahnelerin arkasındaki şeydir. bu bölümün sonunda da kolayca göreceğiz.

00:02:11.000 --> 00:02:21.000
Başlamadan önce, bu bölümde yaptığımız tüm kod örnekleri ve pratik el-on parçaları yeniden programlamaya teşvik etmek istiyorum.

00:02:21.000 --> 00:02:26.000
Uygulama sadece yeni bir teknoloji öğrenmek için en iyisidir.

00:02:26.000 --> 00:02:38.000
Bunu ya programlayarak yapabilirsin ve devamını tekrar tekrar durdurabilirsin, ya da devamını bir kez daha tam olarak inceleyebilirsin ve sonradan örnekleri tek başına programlayabilirsin.

00:02:38.000 --> 00:02:45.000
Tüm kodları GitHub'da da sunacağız. o zaman biraz yönlendirme olarak hizmet edebilir.

00:02:45.000 --> 00:02:52.000
Sadece GitHub'a gidin ve orada tech-lounge-reject'i arayın ve uygun depolama alanını bulmalısınız.

00:02:52.000 --> 00:02:57.000
Şu an burası boş, çünkü tabii ki sadece bu bölümden sonra kodu yükleyeceğim.

00:02:57.000 --> 00:03:04.000
Ben de söyleyeceğim, bir kere bırakalım.

00:03:04.000 --> 00:03:11.000
Çevremizi hazırlamak için birkaç adım atılması gerekiyor. şimdi React ile ilk kez hiçbir ilgisi yok.

00:03:11.000 --> 00:03:19.000
Birincisi, Visual Studio Code'u yüklemeniz gerekiyor, ya da yapmanız gerekmiyor. Başka bir editörü tercih ederseniz, bu da tamamen iyidir.

00:03:19.000 --> 00:03:27.000
Sadece Visual Studio Code ile çalışıyorum çünkü bu fikri çok seviyorum.

00:03:27.000 --> 00:03:32.000
Bana bazı destek isteyin, örneğin kod doldurma, daha sonra da göreceğiz.

00:03:32.000 --> 00:03:38.000
Visual Studio kodu geliştirme ortamının yanı sıra Node.js ve NPM'ye ihtiyacımız var.

00:03:38.000 --> 00:03:48.000
Ve elbette bir proje düzenini oluşturmalı ve çevremizi komut çizgisinde birkaç komut ile hazırlamalıyız.

00:03:48.000 --> 00:03:53.000
Birkaç kelime NPM hakkında, eğer daha önce duymamışsanız.

00:03:53.000 --> 00:04:06.000
NPM, JavaScript araçları, kütüphaneler ve çerçeve işleri için bir paket yöneticisidir ve basit bir komut hattı arayüzü aracılığıyla NPM yorumlarını yükleme ve paketlemeyi sağlar.

00:04:06.000 --> 00:04:15.000
Bu, npm install babel gibi basit bir komut, bugün de yürüteceğiz ve projeye bağımlılıklar kuracağız.

00:04:15.000 --> 00:04:24.000
NPM'de aslında her şey PackageJSON'un etrafında dönüyor. PackageJSON, çoğunlukla proje düzenimizde, Boot klasöründe oluşturacağımız bir dosyadır.

00:04:24.000 --> 00:04:30.000
Ve bu paketJSON bağımlılıklar, senaryolar ve ayrıca proje metadata açıklanır.

00:04:30.000 --> 00:04:36.000
NPM'nin getirdiği başka bir araç npx veya np execute'dır.

00:04:36.000 --> 00:04:44.000
Ve bu, tüm bu JavaScript araçlarını, kütüphaneleri ve çerçeveleri bir yükleme olmadan çalıştırmamıza olanak tanır.

00:04:44.000 --> 00:04:50.000
Örneğin, test projemizi sağlayan yerel bir web sunucusu başlatmak için kullanabiliriz.

00:04:50.000 --> 00:04:56.000
Bunu da yapacağız. ve bu konuda NPM yorumları sunacağız.

00:04:56.000 --> 00:05:00.000
Bu bir yazma hatası değil. bu paket gerçekten böyle adlandırılır.

00:05:00.000 --> 00:05:07.000
npx server bu komutu ile güncel dizide yerel bir web sunucusu başlatır.

00:05:07.000 --> 00:05:12.000
Yine de bu argümanı yeniden yüklüyoruz.

00:05:12.000 --> 00:05:19.000
Bu bize veya sunucunun projemize giren tüm dosyaları izlemesine olanak tanır.

00:05:19.000 --> 00:05:22.000
Ve bir değişiklik olduğunda, tarayıcımız otomatik olarak yeniden yüklenir.

00:05:22.000 --> 00:05:27.000
Bu, geliştirme sırasında çok rahattır, çünkü sayfanın yeniden yüklenmesini elimizden kurtarır,

00:05:27.000 --> 00:05:33.000
F5 tuşuna basarak ya da Reload düğmesi aracılığıyla sayfayı yeniden yüklemek.

00:05:33.000 --> 00:05:39.000
Bu komutu varsayılan olarak çalıştırırsak, aynı anda oluşturacağımız bir indeksleme HTML'i sağlar.

00:05:39.000 --> 00:05:45.000
Şu anki dosyada http://local.html adresinde.

00:05:45.000 --> 00:05:50.000
Ve şimdi size bir npm paketinin kayıtta nasıl göründüğünü göstermek için,

00:05:50.000 --> 00:05:57.000
npm.js.com adresinde bulabileceğiniz tüm paketleri bulabileceğiniz bir arama bulabilirsiniz.

00:05:57.000 --> 00:06:03.000
Ve her paket için ayrıca bir açıklama ve kurulum talimatları ile bir sayfa vardır.

00:06:03.000 --> 00:06:08.000
Bu paketle ilgili bilmeniz gereken her şey.

00:06:09.000 --> 00:06:12.000
Biz bunların hepsini yapmalı mıyız?

00:06:12.000 --> 00:06:20.000
Bunun için komut çizgisine gidelim ve öncelikle bir dosya koyacağız.

00:06:20.000 --> 00:06:24.000
Bunları başlangıç reddetme olarak adlandırıyorum.

00:06:24.000 --> 00:06:28.000
Şimdi görüyorum ki daha önce yapmıştım, bu yüzden bana bir hata getiriyor.

00:06:28.000 --> 00:06:32.000
Önceden yapmış olsaydınız bir hata olurdu.

00:06:32.000 --> 00:06:37.000
Şimdi görüyorum ki daha önce yapmıştım, bu yüzden bana bir hata getiriyor.

00:06:37.000 --> 00:06:41.000
Sizin için bu işe yarayacak. biz sadece bu dosyaya geri dönüş yapabiliriz

00:06:41.000 --> 00:06:45.000
Biz npm init komutunu uygulayacağız.

00:06:45.000 --> 00:06:49.000
npm init bize bir paket JSON, bir başlangıç oluşturur.

00:06:49.000 --> 00:06:55.000
Ve bu bize bu şekilde el ile yapmak biraz tasarruf, bize komut çizgisi üzerinden birkaç soru sorarak.

00:06:55.000 --> 00:07:00.000
Öncelikle, varsayılan olarak mevcut klasörden kolayca çıkarılan paketin adını bilmek istiyor.

00:07:00.000 --> 00:07:04.000
Giriş reddetme bu durumda ok.

00:07:04.000 --> 00:07:07.000
Bu versiyonu da ilk kez iyi görüyoruz.

00:07:07.000 --> 00:07:13.000
Semper, Semantic versiyonu, npm'de çok güçlü bir şekilde kullanılmaktadır.

00:07:13.000 --> 00:07:19.000
Bir açıklama, o zaman biz sadece bir özgür metin düşünmek olabilir.

00:07:19.000 --> 00:07:24.000
Örneğin, bu bir reddetme girişidir.

00:07:24.000 --> 00:07:30.000
Giriş noktası biz daha sonra göreceğiz, bizim için source-app.js.

00:07:30.000 --> 00:07:34.000
Test komutu, biz otomatik test yok, bu yüzden boş bırakıyoruz.

00:07:34.000 --> 00:07:38.000
Biz de Git Repository'yi kurmadık. biz de ilk defa anahtar kelimeleri bırakmak istemiyoruz.

00:07:38.000 --> 00:07:41.000
Bu yazıyı kendimiz yazabiliriz.

00:07:41.000 --> 00:07:47.000
Bir lisans, özel test projelerinde de çok önemli değildir.

00:07:47.000 --> 00:07:53.000
Ben genellikle burada her zaman ile alıyorum, ama ilke de ILC'ye bırakabilirsiniz.

00:07:53.000 --> 00:08:01.000
Npm, tüm girişlerimizin doğru olup olmadığını bir kez daha sorar ve bu JSON dosyasını güncel dizinimizde JSON paketleri olarak bize yerleştirir.

00:08:01.000 --> 00:08:05.000
Bizim durumumuzda her şey yolunda, bu yüzden evet.

00:08:05.000 --> 00:08:10.000
Şimdi bu dosyayı geliştirme ortamımızda açacağız.

00:08:10.000 --> 00:08:13.000
Benim durumum Bishow Studio Code'dur.

00:08:13.000 --> 00:08:20.000
Bunu kolayca yapabiliriz, burada File Open'a gidip, ilgili klasöre gidip Open'ı tıklayarak yapabiliriz.

00:08:23.000 --> 00:08:32.000
Ve şimdi görüyoruz ki, önceden soruya cevap verdiğimiz tüm alanların uygun şekilde kaydedildiği bir JSON paketi oluşturuldu.

00:08:34.000 --> 00:08:42.000
Bir sonraki adım olarak, bir HTML endeksi oluşturmak istiyoruz, yani iletilmesi gereken bir başlangıç HTML sayfası.

00:08:42.000 --> 00:08:46.000
Yeni dosya, index.html ile yapıyoruz.

00:08:47.000 --> 00:08:52.000
Ve orada, dokuma tipi ile başlayan standart bir HTML dosyasını yazıyoruz.

00:08:52.000 --> 00:08:57.000
Ve burada Bishow Studio Code'un muhteşem bir özelliğini gördük.

00:08:57.000 --> 00:08:58.000
Bunu yine sileceğim.

00:08:58.000 --> 00:09:08.000
Bu nedenle, burada oluşturmak istediğim kodun ilk birkaç karakterini girerek, Bishow Studio Code bana bir ön seçenek sunuyor.

00:09:08.000 --> 00:09:13.000
Bunu doğruladığımda, ya Enter aracılığıyla ya da üzerine tıklayarak, buna göre dolduruyorum.

00:09:14.000 --> 00:09:17.000
Klasik bir HTML belgesi bir sonraki gelir.

00:09:17.000 --> 00:09:23.000
Bir başlık ya da bir başlık gününe ihtiyacımız var, o zaman bir başlık verebiliriz.

00:09:23.000 --> 00:09:26.000
Bunu gerçekte uygulayalım.

00:09:27.000 --> 00:09:29.000
Bir Buddy’ye ihtiyacımız var.

00:09:30.000 --> 00:09:35.000
Şimdi, her zaman olduğu gibi, Hello World ile bir kod örneği ile başlayalım.

00:09:36.000 --> 00:09:39.000
Sadece kaydetme baskı değil, şaşırmayın.

00:09:39.000 --> 00:09:42.000
Bu da Bishow Studio Code'un bir özelliği.

00:09:42.000 --> 00:09:46.000
Belirli kriterlere göre otomatik olarak biçimlendirilmiştir.

00:09:47.000 --> 00:09:50.000
Bu nedenle, burada bazen bir çizgi kırışıklığı eklenebilir.

00:09:50.000 --> 00:09:54.000
Bu, her zaman her şeyin birleşik biçimde biçimlendirilmesi için çok rahattır.

00:09:55.000 --> 00:09:58.000
Yani, şimdi bir indeksleme HTML oluşturduk.

00:09:58.000 --> 00:10:00.000
Şimdilerde bir webinar ile görüşmek istiyoruz.

00:10:00.000 --> 00:10:06.039
Geliştirme ortamımızı tamamlamak için sunucular sağlar. ve daha önce tartışıldığı gibi,

00:10:06.039 --> 00:10:17.759
bu ilanı beğen Eki 14 Npx server minus reload. bu ilanı gizle geri yükle bu ilanı geri yükle

00:10:17.759 --> 00:10:24.639
Htp localhost 8080'in şu anki web sitesi veya

00:10:24.639 --> 00:10:31.000
güncel klasörler teslim edilir ve standart olarak bu index.html teslim edilir.

00:10:31.000 --> 00:10:37.240
Biz de görüyoruz, tarayıcıya tırmanarak ve buna göre bu URL girerek.

00:10:37.240 --> 00:10:44.279
bu ilanı beğen Eki 14 Hello World index.html resim bu ilanı gizle geri yükle bu ilanı geri yükle

00:10:44.279 --> 00:10:51.399
bu ilanı gizle geri yükle bu ilanı gizle geri yükle bu ilanı geri yükle

00:10:51.399 --> 00:10:58.799
Şarkı Sözleri - Şarkı Sözleri - Şarkı Sözleri - Şarkı Sözleri - Şarkı Sözleri - Şarkı Sözleri - Şarkı Sözleri

00:10:58.799 --> 00:11:08.159
Sadece UTF-8 girin. biz kaydet'e basıyoruz ve şimdi siteye geri gezinirken,

00:11:08.159 --> 00:11:13.080
Reload bayrağının zaten işini yaptığını görüyoruz. sayfa otomatik olarak

00:11:13.080 --> 00:11:19.759
bu ilanı beğen Eki 14 I'm doing it right now. bu ilanı gizle geri yükle bu ilanı geri yükle

00:11:19.759 --> 00:11:26.200
Gelişmekte olan bir ortamda, artık React'i geliştirebiliriz.

00:11:26.200 --> 00:11:33.759
Biraz teorisi. şimdi projeye React yüklemek için çeşitli yöntemler var

00:11:33.759 --> 00:11:39.680
React'i nasıl veya nasıl ayarlayabiliriz. en kolay yöntem online oyun alanlarıdır.

00:11:39.680 --> 00:11:46.960
Online oyun alanları prensip olarak doğrudan tarayıcıda geliştirme ortamıdır. ve React kendisi sunar

00:11:46.960 --> 00:11:51.080
bir sayfa belgeler bir çevrimiçi oyun alanı, örneğin CodePen.

00:11:51.080 --> 00:11:56.879
İnternetten başlangıç yapmayı deneyin, online başlangıç yapmayı deneyin.

00:11:56.879 --> 00:12:02.440
Oyun alanları. örneğin CodePen'e girdiğimizde, hemen iletileceğiz.

00:12:02.440 --> 00:12:10.759
Şimdi de burada bir Hello World uygulaması var React, biz buna göre

00:12:10.759 --> 00:12:16.679
Biz sadece bir U giriyoruz. ve Command Enter aracılığıyla sayfa şimdi

00:12:16.679 --> 00:12:23.519
Güncellenmiş. bu söylendiği gibi, React denemek için harika, belki de bazen

00:12:23.519 --> 00:12:29.200
yerel olarak işe yaramaz bir şey, yeniden düzenlemek. ama biz uzun vadeli projeler

00:12:29.200 --> 00:12:33.000
Doğal olarak, ürettiğimiz kodu bir şekilde geliştirmek istiyoruz.

00:12:33.000 --> 00:12:39.079
ve bu çevrimiçi oyun alanlarında oldukça zor mümkün. bu nedenle biz

00:12:39.080 --> 00:12:45.639
bu ilanı gizle geri yükle bu ilanı geri yükle bu ilanı geri yükle

00:12:45.639 --> 00:12:53.080
React'tan kaynak kodu indirin. yapabilseydik, ama günümüzde oldukça eski moda.

00:12:53.080 --> 00:12:57.840
Örneğin, React'in yeni bir versiyonunu yüklemek istiyorsak,

00:12:57.840 --> 00:13:01.799
WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB WEB

00:13:01.799 --> 00:13:07.600
Günümüzde en çok tercih edilen yöntemlerden biri, daha yüksek yöntemlerden biri.

00:13:07.600 --> 00:13:13.600
CDN (Content Delivery Network) olarak adlandırılan bir CDN URL’dir.

00:13:13.600 --> 00:13:19.480
Sadece React'ın kaynak kodunu bir kez yüklediği bir web sitesi ve

00:13:19.480 --> 00:13:25.000
URL aracılığıyla indeksleme HTML'imize kolayca bağlanabiliriz. ve bu hızlı için idealdir

00:13:25.000 --> 00:13:30.399
Sınavlar ya da öğrenme projeleri için, bu yıl burada bir öğrenme projesi gibi. ve buna göre

00:13:30.399 --> 00:13:37.519
Biz de bugün React'in kurulumunun bu varyantını kullanacağız.

00:13:37.519 --> 00:13:43.680
Bir başka seçenek de var, tabii ki NPM ile yükleme. çünkü React da var

00:13:43.680 --> 00:13:51.799
bu ilanı beğen Eki 14 React has been uploaded to NPM. bu ilanı gizle geri yükle bu ilanı geri yükle

00:13:51.799 --> 00:14:01.000
Bununla birlikte, NPM aracılığıyla veya daha sonra web sitenize giriş yapmanız gerekir.

00:14:01.000 --> 00:14:07.279
Bu kadar kolay değil, bir ya da başka bir alet gerektirir.

00:14:07.279 --> 00:14:13.319
Başlangıç işleri çok karmaşık yapar. Bu, daha büyük uygulamalarda kesinlikle,

00:14:13.319 --> 00:14:19.120
Çünkü bu haksız karmaşık çaba o zaman biz bu

00:14:19.120 --> 00:14:25.519
Daha sonra varyant tasarruf. React ile NPM ile kurulum daha sonra

00:14:25.519 --> 00:14:30.200
Sonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki Yazı

00:14:30.200 --> 00:14:38.399
Bugün için, dediğimiz gibi, ancak CDL URL bağlantısı kullanıyoruz.

00:14:38.399 --> 00:14:46.639
HTML indekslerimizde bu iki Script etiketini giriyoruz ve böylece React

00:14:46.639 --> 00:14:52.919
Bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda, bu yazıyı okuduğunuzda.

00:14:52.920 --> 00:15:00.120
React.js.org resmi web sitesinde CDN bağlantıları altında. o iki olduğunu göreceksiniz

00:15:00.120 --> 00:15:04.160
Projeye katılmak için çeşitli seçenekler vardır. bir kez geliştirme modunda

00:15:04.160 --> 00:15:10.759
ve bir kez üretim modunda. fark oldukça basittir, gelişme modunda bazı

00:15:10.759 --> 00:15:15.400
Daha iyi hata mesajları sağlar ve bazı araçları sağlar,

00:15:15.400 --> 00:15:19.480
React'ın geliştirilmesini kolaylaştıran ama aynı zamanda bu JavaScript dosyalarını

00:15:19.720 --> 00:15:25.039
çok planlı ve çok büyük yapmak. React'in üretken kullanımında elbette çok az istiyoruz

00:15:25.039 --> 00:15:29.319
Mümkün olduğunca kod sayfasında, çünkü o da indirmek gerekir.

00:15:29.319 --> 00:15:33.319
Ancak, şimdi bu farklılıklara rağmen, üretici bir şekilde çalışmaktan çok uzakta olduğumuz için,

00:15:33.319 --> 00:15:38.680
Bugün, sadece burada kopyalamış olduğum gelişme kaynaklarına sınırlayalım.

00:15:38.680 --> 00:15:47.360
Daha sonra React kaynaklarını projemize dahil edersek,

00:15:47.360 --> 00:15:54.440
İlk kod, ilk blok React ile,

00:15:54.440 --> 00:15:58.000
Önceden duyurduğumuz gibi kullanacağımız React Element.

00:15:58.000 --> 00:16:04.039
React Element veya React Element bu fonksiyonu kullanarak oluşturur.

00:16:04.039 --> 00:16:10.039
React Create Element ve üç parametreden oluşur. ilk parametreler HTML etiketini verir

00:16:10.039 --> 00:16:14.879
Bu durumda, örneğin, bir P-gün. ikinci parametre

00:16:14.879 --> 00:16:19.600
Hangi özellikleri bu HTML etiketine eklemek istiyoruz. bu durumda şimdi bir

00:16:19.600 --> 00:16:26.440
Üçüncü parametre, bu HTML etiketine hangi içeriği yeniden ayarladığımızı veya

00:16:26.440 --> 00:16:32.720
bu ilanı beğen Eki 14 I want to re-enroll. in this case here my content. this function call ultimately makes

00:16:32.720 --> 00:16:39.639
Sadece bir JavaScript nesnesi oluşturmak için başka bir şey değil. ancak bu JavaScript nesnesi

00:16:39.639 --> 00:16:45.599
React tarafından anlaşılır ve daha sonra React tarafından yeniden React'in sanal DOM'una uygulanabilir

00:16:45.599 --> 00:16:50.559
Bir kez sanal DOM'da birleştirildiğinde, hatırlıyoruz,

00:16:50.559 --> 00:16:56.759
React, sanal DOM'u doğru DOM'a senkronize eder, bu öğe bir

00:16:56.759 --> 00:17:00.759
Gerçek DOM nesne ve buna göre tarayıcıya gösterilmiştir. bu yüzden söyleyebiliriz,

00:17:00.759 --> 00:17:08.839
bir react elemanı gerçek bir DOM nesnesini temsil eder.

00:17:08.839 --> 00:17:14.839
Görüntülemeye bir kez daha bakın, bu yüzden şimdi React'in Virtual DOM'unun yanı sıra bizim

00:17:14.839 --> 00:17:20.200
JavaScript dosyaları bu fonksiyon çağrısı React Create Element, o zaman burada sanal

00:17:20.200 --> 00:17:24.920
DOM tek bir öğe olarak bağlanır, sonra DOM ile senkronize edilir ve daha sonra bizim

00:17:24.920 --> 00:17:31.960
bu ilanı beğen Eki 14 I've also added this image, which

00:17:31.960 --> 00:17:37.759
Biz sadece gördük paket avlanma başlatılır ve kurulur. ve biz

00:17:37.759 --> 00:17:46.639
NPX, web sunucusunun bize ne başladığını öğreniyor. şimdi her şeyi bir kez daha uygulamak istiyoruz.

00:17:46.639 --> 00:17:53.159
İhtiyacımız olan kaynakları bir kez daha kısaca kopyalayacağız, öncelikle geri dönelim.

00:17:53.159 --> 00:18:04.000
Bizim Visual Studio ve şimdi sadece BodyTags sonunda React eklemek.

00:18:04.000 --> 00:18:10.720
Şimdilerde react yapıyoruz ama elbette hiçbir şey yapmıyoruz.

00:18:10.720 --> 00:18:15.039
Bunu yapmak için, kendi JavaScript'e ihtiyacımız var.

00:18:15.039 --> 00:18:21.839
İkinci ya da üçüncü günün bir kısmını da ekleyeceğiz.

00:18:21.839 --> 00:18:34.480
sourceapp.js gösterilecektir. bu dosyayı daha sonra ekleyeceğiz. ilk önce bir dosya kaynağı, bu sadece bir

00:18:34.480 --> 00:18:39.880
src, bir projenin tüm kaynak dosyalarının yerleştirildiği kaynak anlamına gelir.

00:18:39.880 --> 00:18:49.319
O zaman dosyayı koyacağız. app.js. şimdi JavaScript yazmadan önce,

00:18:49.320 --> 00:18:53.880
index.html'de bir şey daha var. belki de son kez hatırlıyoruz

00:18:53.880 --> 00:18:59.559
ReactDomRenderFonksiyonu, birincisi, react bir bileşeni getirdiğimiz

00:18:59.559 --> 00:19:04.280
Bu yazıyı okuduğumuzda, HTML’de bu bileşenin nerede olduğunu da belirtmek zorundayız.

00:19:04.280 --> 00:19:08.960
bu ilanı gizle geri yükle bu ilanı geri yükle bu ilanı geri yükle

00:19:08.960 --> 00:19:15.440
bu ilanı gizle geri yükle bu ilanı gizle geri yükle bu ilanı geri yükle

00:19:15.440 --> 00:19:29.240
o zaman sadece React.js. bir kez daha kısa sayfa bakınca, hiçbir şey değişmedi,

00:19:29.240 --> 00:19:33.720
Her şey eski, çünkü henüz burada bağladığımız React elemanı oluşturmadık.

00:19:33.720 --> 00:19:42.599
Şimdi bunu yapıyoruz.Öncelikle bir react elemanı oluşturuyoruz.

00:19:42.599 --> 00:19:51.000
Bir değişken, şimdi sadece element olarak adlandırıyoruz, şimdi React.CreateElement kullanıyor.

00:19:51.000 --> 00:19:57.240
React, şu anda mevcut olan küresel bir değişkentir, çünkü biz burada

00:19:57.240 --> 00:19:59.960
Bu yazıyı yazdığım için.

00:20:00.000 --> 00:20:06.240
Sonuçta, React kaynakları bu değişkenler altında ve böylece CreateElement yöntemi sunmaktan başka bir şey yapmaz.

00:20:06.240 --> 00:20:12.039
İlk parametreler tam olarak gün, bu durumda biz her zaman Ptag kalır.

00:20:12.039 --> 00:20:16.440
İkinci parametreler olarak atribütler, biz ilk boş bırakın.

00:20:16.440 --> 00:20:22.359
Üçüncü parametre olarak içeriği, burada şimdi sadece içeriği yazıyoruz,

00:20:22.359 --> 00:20:30.359
Bu benim ilk react elementim.

00:20:30.359 --> 00:20:32.359
Daha doğru .

00:20:34.359 --> 00:20:39.960
Sadece bahsettiğimiz gibi, React-Create elemanı ilk kez sadece basit bir JavaScript nesne oluşturur.

00:20:39.960 --> 00:20:50.359
Bu nesneyle bir şeyler yapmamız gerekiyor, React'a bu JavaScript nesnesinin ya da React elemanının daha sonra tarayıcımızda nereye gideceğini göstermemiz gerekiyor.

00:20:50.359 --> 00:20:53.359
Bunun için React-DOM kullanıyoruz.

00:20:53.359 --> 00:21:01.359
Bu da mevcut olan küresel bir değişkentir, çünkü burada React-DOM için bu ikinci senaryoyu birleştirdik.

00:21:01.359 --> 00:21:09.359
Bu, öncelikle elemanımızı girdiğimiz Render fonksiyonuna sahiptir.

00:21:09.359 --> 00:21:13.359
Şimdi bunu nereye yönlendirmek istediğimizi söylemeliyiz.

00:21:13.359 --> 00:21:17.359
Önceki İçerikDIV’yi açtık ve bir ID’yi kaybettik

00:21:17.359 --> 00:21:27.359
Ve bunu burada bir selektörle bulabilir veya filtre edebiliriz, yani Document, Get Element by ID.

00:21:27.359 --> 00:21:34.359
Ve burada daha önce verdiğimiz kimliği, Reakt uygulama durumunda kopyalayın ve ekleyin.

00:21:36.359 --> 00:21:45.359
Ve biz her şeyi kaydetmek ve web sitesine gitmek, o zaman biz görmek, juhu, biz bizim ilk reakt bileşeni var,

00:21:45.359 --> 00:21:49.359
Hayır, web sitesinde ilk React elemanı indirildi.

00:21:49.359 --> 00:21:53.359
DOM'larımızı manipüle etmek için React'i ilk kez kullandık.

00:21:53.359 --> 00:22:00.359
Biraz istikrarlı ama yine de harika bir ilk adım.

00:22:02.359 --> 00:22:07.359
Şimdi kendinize soracaksınız, son kez açıklayıcı programlama ve JSX hakkında söyledim,

00:22:07.359 --> 00:22:12.360
HTML'i JavaScript dosyalarında yazmamıza izin verir.

00:22:12.360 --> 00:22:18.360
Artık her şeyi Reaktory Elemanı ile aramayı yapmayacağımızı bekleyeceksiniz.

00:22:18.360 --> 00:22:28.360
Daha doğrusu böyle bir şey yazabilir, yani doğrudan JavaScript dosyasında kimlik ile bir HTML öğesi.

00:22:34.360 --> 00:22:39.360
Bunu yaparsak bir hata yapacağız.

00:22:39.360 --> 00:22:46.360
Birincisi, tarayıcıya geri döndüğümüzde, öğemizin artık indirilmediğini görüyoruz.

00:22:46.360 --> 00:22:53.360
Burada neyin yanlış gittiğini bulmak için, Chrome'un veya diğer tarayıcıların geliştiricileri alabiliriz,

00:22:53.360 --> 00:22:56.360
Her tarayıcı geliştiricilerin araçlarını getirir, elimizde tutar.

00:22:56.360 --> 00:23:01.360
Bunu ya F12 tuşuna göre yapabiliriz ya da sağ tıklayarak araştırma yapabiliriz.

00:23:02.360 --> 00:23:10.360
Bu araştırmalarda, güncel DOM'larımızı ya da HTML'imizi görüyoruz, burada da gezinebiliriz.

00:23:10.360 --> 00:23:14.360
Bizim meta-Char setimiz, tam olarak Buddy.

00:23:20.360 --> 00:23:23.360
Biz de yanıltmamızı sağlayan bir konsol var.

00:23:23.360 --> 00:23:30.360
Ve bu durumda şimdi görüyoruz, bir Synthax hatası var, beklenmedik bir işaret, beklenmedik token, açık bir klavye.

00:23:30.360 --> 00:23:32.360
İşte tam da bu işaret.

00:23:33.360 --> 00:23:39.360
Çünkü günümüzde bir tarayıcı en azından JSX'i anlamıyor.

00:23:39.360 --> 00:23:44.360
Bir tarayıcı sadece native JavaScript'i anlıyor ve bu sadece native JavaScript'i anlamıyor.

00:23:44.360 --> 00:23:49.360
Bu nedenle, tarayıcı bu kod parçası bile anlayamaz.

00:23:49.360 --> 00:23:52.360
Bunu yapabilmek için bir şeyler yapmamız gerekiyor.

00:23:52.360 --> 00:23:57.360
Bu kodu normal bir JavaScript’e dönüştürmek zorundayız.

00:23:57.360 --> 00:23:59.360
Bu noktada küçük bir ipucu var.

00:23:59.360 --> 00:24:02.360
React-Create elemanı oldukça normal JavaScript'tir.

00:24:02.360 --> 00:24:04.360
Bu işin işe yaradığını gördük.

00:24:05.360 --> 00:24:11.360
Bunu yapabilmek ve bu çeviri yapabilmek için elbette bu işin yapılması gerekmez.

00:24:11.360 --> 00:24:15.360
Bu çok zor, ama araçlar var.

00:24:15.360 --> 00:24:19.360
Ve bu araçlardan biri, teoriye geri dönüyoruz, Babel'dir.

00:24:20.360 --> 00:24:31.360
Babel, JSX gibi özellikleri ve fonksiyonları, tarayıcının anladığı yerel JavaScript'e çeviren bir yardımcı ya da çevirmen türüdür.

00:24:32.360 --> 00:24:37.360
Babel temel olarak, bugün de kullanacağımız üç çekirdek bileşenten oluşur.

00:24:37.360 --> 00:24:39.360
Bir zamanlar bu bir çekirdek.

00:24:39.360 --> 00:24:41.360
Tüm çeviri mantığı budur.

00:24:41.360 --> 00:24:44.360
Command Line Interface veya kısaca CLI.

00:24:44.360 --> 00:24:50.360
Bu, Babel’le iletişim kurmamıza ve konuşmamıza ve Babel’e gerçekten neyi tercüme etmek istediğimizi anlatmamıza izin verir.

00:24:50.360 --> 00:24:52.360
Presetler de var.

00:24:52.360 --> 00:25:00.360
Presets'i, örneğin JSX'i normal JavaScript'e çevirmek için Babel'e gönderdiğimiz sözlükler olarak hayal edebilirsiniz.

00:25:01.360 --> 00:25:03.360
Ve bugün Preset React'i kullanıyoruz.

00:25:03.360 --> 00:25:08.360
Preset React, dosyalarımızda JSX'in kullanılmasını sağlayan tam olarak bu sözlüktir.

00:25:08.360 --> 00:25:13.360
Babel bu JSX'i normal bir JavaScript'e dönüştürür.

00:25:14.360 --> 00:25:17.360
Görüntülemeye baktığımızda bunu yapalım.

00:25:17.360 --> 00:25:19.360
Şu anda burada duruyoruz.

00:25:19.360 --> 00:25:22.360
JavaScript React ve Create Element ile çalıştırdık.

00:25:22.360 --> 00:25:25.360
Bu işe yarıyor, ama şimdi JSX ile getirdik.

00:25:25.360 --> 00:25:27.360
Bu artık işe yaramadı.

00:25:27.360 --> 00:25:37.360
Bu yüzden JSX'i Babel'e geçmemiz gerekiyor, böylece normal bir JavaScript'e dönüştürüyoruz, bu da React veya tarayıcılarımız tarafından anlaşılabilir.

00:25:37.360 --> 00:25:42.360
Bu noktada yavaş yavaş farkına varılabilir.

00:25:42.360 --> 00:25:55.360
Babel, bu JSX Snippets'ten veya JSX'te yazdığımız JavaScript'teki HTML parçalarından React.CreateElement fonksiyonu arama yapmaktan başka bir şey yapmaz.

00:25:56.360 --> 00:25:58.360
Bunun arkasında yer alan tüm sihir.

00:25:58.360 --> 00:26:01.360
Bunu da sizlere göstereceğim.

00:26:01.360 --> 00:26:04.360
Ama öncelikle, Babel'i nasıl kuracağız?

00:26:04.360 --> 00:26:12.360
Bunun için şimdi npm kullanıyoruz ve Babel Core, Babel CLI ve Preset React'i projemize yerleştireceğiz.

00:26:13.360 --> 00:26:15.360
Ve şimdi bunu yapıyoruz.

00:26:16.360 --> 00:26:18.360
Şimdi komut hattına geri dönelim.

00:26:18.360 --> 00:26:21.360
İnternet sitemizi bu noktada bitirelim.

00:26:21.360 --> 00:26:23.360
Biz komutanlık yapıyoruz.

00:26:23.360 --> 00:26:34.360
npm install add babel core add babel cli ve add babel reset react

00:26:35.360 --> 00:26:40.360
Burada biraz daha parametreler ekliyoruz, yani –save-def.

00:26:40.360 --> 00:26:42.360
Neden böyle bir şey yapıyoruz, o zaman açıklayacağım.

00:26:44.360 --> 00:26:46.360
Enter tuşuna basalım.

00:26:47.360 --> 00:26:51.360
Bu biraz zaman alır, çünkü elbette tüm paketleri indirmek zorunda.

00:26:52.360 --> 00:26:54.360
Şimdi burada bir hata görüyorsunuz.

00:26:54.360 --> 00:26:55.360
Mac’te böyle bir şey oluyor.

00:26:55.360 --> 00:26:57.360
Bu hatayı gördüğünüzde şaşırmayın.

00:26:57.360 --> 00:27:01.360
En azından endişelenmeyin, bu bizim için önemli değil.

00:27:01.360 --> 00:27:04.360
Babel'in bazı özellikleri bu hatalar nedeniyle işe yaramaz.

00:27:04.360 --> 00:27:07.360
Ama bunlar şu anda ihtiyacımız olan özellikler değildir.

00:27:07.360 --> 00:27:10.360
Bu hatayı rahatlıkla görmezden gelebiliriz.

00:27:10.360 --> 00:27:12.360
Şimdi kurulum tamamlanmıştır.

00:27:12.360 --> 00:27:14.360
Visual Studio Code’a geri dönelim.

00:27:14.360 --> 00:27:16.360
Biraz bakalım, bir şey değişti.

00:27:17.360 --> 00:27:23.360
Birincisi, paketimizde bir yeni alan eklendi, yani bu def bağımlılıklar.

00:27:23.360 --> 00:27:28.360
İşte bu yüzden “Save-Def” komutunu kullandım.

00:27:28.360 --> 00:27:36.360
Ve bu, nihayetinde, projemizin ya da gelişme bağımlılıklarının tüm bağımlılıklarını burada bu paket şasaya anlatıyor.

00:27:37.360 --> 00:27:41.360
Şimdi çok fazla ayrıntıya gitmek istemiyorum, çünkü bu React ve npm hakkında bir ders değil.

00:27:41.360 --> 00:27:43.360
Neden bu hatayı belirttiğimi anlıyorsunuz.

00:27:44.360 --> 00:27:47.360
Ayrıca bir paket Log Chasen oluşturulmuştur.

00:27:47.360 --> 00:27:52.360
Bu, tam özellikleri ile yüklediğimiz tüm paketlerin bir günlüğüdür.

00:27:52.360 --> 00:27:55.360
Ve son olarak, burada Node modülleri kuruldu.

00:27:55.360 --> 00:28:00.360
Bu, yüklediğimiz paketlerin aslında indirdiği klasördür.

00:28:00.360 --> 00:28:06.360
Bunu kısa bir süre açtığımızda, elbette burada yüklediğimizden çok daha fazlasını görüyoruz.

00:28:06.360 --> 00:28:12.360
Bunun nedeni, Babel’in kendisinin de bağımlılıkları olduğu ve bu bağımlılıkları bir paket şasayla tanımladığıdır.

00:28:12.360 --> 00:28:19.360
Ve tüm bu bağımlılıklar Babel veya npm bizim için yüklü o zaman eşit olarak biz bunu yapmamız gerekmez.

00:28:20.360 --> 00:28:30.360
Ama biz de görüyoruz, add-babel-cli yüklendi, add-babel-core yüklendi ve aşağıda add-babel-preset-react şimdi de projemizde mevcuttur.

00:28:37.360 --> 00:28:42.360
Şimdi Babel'i biraz daha yapılandırmalıyız ya da yapmalıyız.

00:28:42.360 --> 00:28:46.360
Babel ne yapacağını henüz bilmiyordu.

00:28:46.360 --> 00:28:49.360
Babel’in hangi sözcükleri kullanması gerektiğini henüz bilmiyor.

00:28:49.360 --> 00:28:51.360
Öncelikle sözlükle başlayalım.

00:28:51.360 --> 00:28:58.360
Babel'i yeniden yapılandırarak, .babel-rc olarak adlandırılan yeni bir dosya oluşturarak kolayca yapılandırabiliriz.

00:28:59.360 --> 00:29:03.360
Bu dosyada geçerli şasalar yazabiliriz.

00:29:03.360 --> 00:29:06.360
Bu aslında sadece bir Chase dosyası olsa bile, Chase ile sona ermez.

00:29:06.360 --> 00:29:11.360
Orada bir nesne kurabilir ve Presets alanını doldurabiliriz.

00:29:11.360 --> 00:29:16.360
Ve orada bir array içinde hepimiz Babel'in bizim için kullandığı Presets'i yazıyoruz.

00:29:16.360 --> 00:29:19.360
Bu yüzden tercüme etmek istediğimiz tüm kelimeleri söyleyin.

00:29:19.360 --> 00:29:24.360
Bizim durumumuzda bu sadece bir şey, yani babel-preset-react.

00:29:24.360 --> 00:29:26.360
Bu ilk adım.

00:29:26.360 --> 00:29:33.360
İkinci adımda, bu App.js'ten bir App.jsx dosyası yapmamız gerekiyor.

00:29:33.360 --> 00:29:37.360
Gerçekten de burada geçerli bir çavaz yazısı yok.

00:29:37.360 --> 00:29:44.360
Bu nedenle, bu da artık bir Chavascript dosyası değil, şimdi bir .jsx dosyasıdır, çünkü burada .jsx ekledik.

00:29:44.360 --> 00:29:48.360
Ve şimdi Babel bu dosyayı bizim için tercüme etmeliyiz.

00:29:48.360 --> 00:29:51.360
Şimdilerde Babel-City etkinlikleri ile yapabiliyoruz.

00:29:51.360 --> 00:29:53.360
Şimdi bu hatayı kısa sürede ortadan kaldıralım.

00:30:00.000 --> 00:30:05.720
Şimdi iki seçenek var. burada da NPX kullanabiliriz,

00:30:05.720 --> 00:30:10.680
Babel’e gidiyoruz ama biz de Babel’e gidiyoruz.

00:30:10.680 --> 00:30:16.319
Node modülleri, bin veya binary dosyaları olarak adlandırılan düğüm modülleri,

00:30:16.319 --> 00:30:24.400
Bu komut üç parametreyi bekliyor. birincisi,

00:30:24.400 --> 00:30:28.240
Kaynak listesi veya Babel'in bizim için tercüme edilmesi gereken listesi.

00:30:28.240 --> 00:30:33.519
bu ilanı beğen Eki 14 It's waiting for the parameter minus out here.

00:30:33.519 --> 00:30:39.279
Babel'in kopyalanmış veya tercüme edilen dosyaları yazması gereken yer.

00:30:39.279 --> 00:30:44.720
bu ilanı gizle geri yükle bu ilanı geri yükle bu ilanı geri yükle

00:30:44.720 --> 00:30:51.799
Babel bize başarılı bir mesaj ile biz bir dosya başarılı

00:30:51.799 --> 00:30:57.599
kopyalanmış veya tercüme edilmiştir. proje dizinine geri atladığımızda, biz de görüyoruz,

00:30:57.599 --> 00:31:02.279
bu lib dosyası oluşturuldu ve burada buna göre, App.js ile analog olarak,

00:31:02.279 --> 00:31:08.200
bir App.js dosyası oluşturulmuştur. ve biz de görebilirsiniz. ve bakın,

00:31:08.200 --> 00:31:16.039
JSX'imizden bir React-Create Element çağrısı, nispeten veya

00:31:16.039 --> 00:31:20.480
Ancak, henüz nispeten değil, daha önceden bahsettiğimiz gibi oldukça benzer görünüyor.

00:31:20.480 --> 00:31:27.240
Bu aslında JSX ve Babel arkasındaki tüm sihirdir.

00:31:27.240 --> 00:31:31.200
HTML ve bizim JSX bir React.Create eleman çevirmek için.

00:31:31.200 --> 00:31:39.119
Şimdi, işe yaramak için, indeks HTML'imizde küçük bir değişiklik yapmamız gerekiyor.

00:31:39.119 --> 00:31:44.160
Çünkü artık kaynağımızdan App.js'i veya App.jsx'i teslim etmiyoruz.

00:31:44.160 --> 00:31:50.240
Ancak burada uygulamanızın çevirilen versiyonunu yayınlamalıyız.

00:31:50.240 --> 00:32:01.079
Yine bir web sunucusu açtığımızda ve tekrar bir web sunucusu açtığımızda

00:32:01.079 --> 00:32:12.960
web sitemizi gezinmek, biz görüyoruz, biz hala eski öğe var. ben de neden biliyorum. çünkü

00:32:12.960 --> 00:32:16.279
Biz de buraya gelmiştik ama biz de buraya gelmek istiyoruz.

00:32:16.279 --> 00:32:20.360
ilk JSX bileşenleri birleştirmek. bu nedenle burada değiştirmemiz gerekir.

00:32:20.360 --> 00:32:27.920
Biz şimdi my.jsx eleman iade etmek istiyoruz. biz şimdi Babel'den her şeyi elbette

00:32:27.920 --> 00:32:36.079
Şimdi web sunucusunu başlatırsak, aslında görmeliyiz,

00:32:36.079 --> 00:32:44.599
İlk JSX bileşenlerimizi başarılı bir şekilde tarayıcıya yönlendirdik.

00:32:46.759 --> 00:32:52.200
Sonuna gelmeden önce, size küçük bir ipucu vermek istiyorum.

00:32:52.200 --> 00:32:58.480
Çünkü biz burada sadece gördüğümüz bu emir, not modules ben Babel kaynağı, zor

00:32:58.480 --> 00:33:03.240
bu ilanı gizle geri yükle bu ilanı geri yükle bu ilanı geri yükle

00:33:03.240 --> 00:33:10.079
npm-scripts biraz eksiklik sağlar. Scripts bize izin verir çünkü bir

00:33:10.079 --> 00:33:14.480
Alias ya da başka bir isimle önceden tanımlayın. bu yüzden şimdi burada böyle bir şey

00:33:14.480 --> 00:33:23.799
bu ilanı beğen Eki 14 How to compile and there the command Babel source minus out here lip,

00:33:23.799 --> 00:33:30.759
Bir komma ile takip ederek, biz bu çok zor komut önemli ölçüde daha kolay yazabiliriz

00:33:30.759 --> 00:33:35.480
biz komut çizgisi çalıştırmak. kısaca, biz burada not modules olduğunu kurtarabiliriz,

00:33:35.480 --> 00:33:41.319
Çünkü npm'in senaryoları varsayılan olarak bu ikili dizine bağlanır. yani,

00:33:41.319 --> 00:33:45.639
Burada tüm bu önceki yoldan vazgeçebilir ve sadece Babel'i doğrudan yapabiliriz.

00:33:45.639 --> 00:33:52.480
Şimdi biz sadece mevcut listemizdeki komutu üzerinden npm her çalıştırmak mümkün

00:33:52.480 --> 00:33:57.960
Script biz tanımladık yürütmek. bizim durumumuzda sadece kopyalamak. gördüğümüz gibi,

00:33:57.960 --> 00:34:03.000
Babel, JSX dosyalarımızı bize çevirmek için yeniden çalıştırıldı.

00:34:05.480 --> 00:34:12.320
Sonuç olarak, burada Scripts'ta herhangi bir geçerli CLI komutu yerleştirilebilir ve böylece

00:34:12.320 --> 00:34:18.239
Projelerimiz için ilgili CLI komutları çok basit ve çok açık

00:34:18.239 --> 00:34:23.519
Bu, birçok projede de çok büyük ölçüde kullanılan küçük bir ipucu

00:34:23.519 --> 00:34:32.480
Örneğin, NTX sunucularını burada kaydederek son olarak bunu genişletebiliriz ve

00:34:32.480 --> 00:34:36.400
Artık NTX sunucularına giriş yapmamız gerekmiyor, web sunucularımızı başlatmak için ve

00:34:36.400 --> 00:34:43.599
Web sitesi teslim, npm çalıştırma başlangıç giriş yapabilirsiniz. ve şimdi web sunucusu yeniden kullanılabilir.

00:34:43.599 --> 00:34:54.559
Sonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki YazıSonraki Yazı

00:34:54.559 --> 00:34:59.840
Biz Visual Studio kodu ve npm ile yerel ayar hazırladık.

00:35:00.000 --> 00:35:05.440
Npm, Npx ve Babel araçlarına bakış açısı verildi ve biz de bunları canlı olarak kullandık.

00:35:05.440 --> 00:35:12.400
CDN veya Content Delivery Network URL varyantı ile React'i birleştirdik ve

00:35:12.400 --> 00:35:18.559
React Element ve JSX ile React'tan ilk Hello World uygulaması uygulandı.

00:35:18.559 --> 00:35:22.719
Bir dahaki sefere daha heyecanlı olacağız, bir dahaki sefere daha heyecanlı olacağız

00:35:22.719 --> 00:35:28.199
React bileşenleri temsil eder ve kullanır ve React bileşenleri ile Render fonksiyonu,

00:35:28.199 --> 00:35:35.639
Props ve daha sonra JSX'in bazı özellikleri ile tanışın.

00:35:35.639 --> 00:35:40.199
Bu videoyu izlediğiniz için çok mutluyum umarım bir şeyler öğreneceksiniz.

00:35:40.199 --> 00:35:46.119
Sorularınız, geribildirimleriniz veya diğer isteğiniz ve önerileriniz varsa lütfen bizimle iletişime geçin.

00:35:46.119 --> 00:35:51.760
Kanal hello at thenativefab.io e-posta yoluyla ya da Twitter ve GitHub ve ben size diliyorum

00:35:51.760 --> 00:35:55.440
Güzel bir gün geçirelim ve bir sonraki günün sonuna kadar.

