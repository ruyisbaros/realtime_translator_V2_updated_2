[
    {
        "start_time": 0,
        "end_time": 4719,
        "text": "In diesem Video zeige ich dir, wie du deine eigenen Apps und Webseiten entwickeln kannst mit React. "
    },
    {
        "start_time": 4719,
        "end_time": 9240,
        "text": "Selbst wenn du jetzt noch ganz am Anfang bist und vielleicht noch nie eine Zeile Code geschrieben hast. "
    },
    {
        "start_time": 9240,
        "end_time": 12560,
        "text": "Die Webseite, die wir heute entwickeln werden, ist folgende. "
    },
    {
        "start_time": 12560,
        "end_time": 18800,
        "text": "Ein Onlineshop, wo du verschiedene Gemüse und Obstsorten sehen kannst und diese in deinen Warenkorb hinzufügen kannst. "
    },
    {
        "start_time": 18800,
        "end_time": 23440,
        "text": "In diesem Video lernst du also ganz konkret, wie du React auf deinem Computer zum Laufen bekommst, "
    },
    {
        "start_time": 23440,
        "end_time": 30679,
        "text": "wie du eine Applikation damit erstellst und wie du das Ganze in Zukunft für dich nutzen kannst, um diverse eigene Programme zu schreiben. "
    },
    {
        "start_time": 30679,
        "end_time": 34879,
        "text": "Als ich damals mit JavaScript angefangen habe, war die Sprache noch nicht besonders komfortabel. "
    },
    {
        "start_time": 34879,
        "end_time": 40960,
        "text": "Es gab einfach Dinge, die sehr kompliziert zu schreiben waren. Mit React hat sich das grundlegend geändert. "
    },
    {
        "start_time": 40960,
        "end_time": 46359,
        "text": "Wir können Sachen mit viel weniger Code, viel effizienter und gleichzeitig noch viel verständlicher schreiben. "
    },
    {
        "start_time": 46359,
        "end_time": 53159,
        "text": "Und das Ganze kannst du sogar relativ schnell lernen. Also würde ich sagen, gehen wir direkt an den Computer und legen los. "
    },
    {
        "start_time": 53159,
        "end_time": 64679,
        "text": "Klären wir erst einmal die Frage, was ist überhaupt React? React ist eine JavaScript-Library und diese wurde von Facebook entwickelt. "
    },
    {
        "start_time": 64679,
        "end_time": 70799,
        "text": "Ziel war es damals einfach von Facebook eine Möglichkeit zu finden, um JavaScript deutlich effizienter zu schreiben. "
    },
    {
        "start_time": 70799,
        "end_time": 79239,
        "text": "React ist kein Framework, sondern eine sogenannte Library. Also eine Bibliothek, die uns verschiedene JavaScript-Funktionen zur Verfügung stellt. "
    },
    {
        "start_time": 79239,
        "end_time": 87079,
        "text": "React ist auf Komponenten aufgebaut. Wir haben Komponenten, die wieder weitere Unterkomponenten besitzen. "
    },
    {
        "start_time": 87079,
        "end_time": 91359,
        "text": "Eine Unterkomponente stellt dabei meistens einen Teil aus unserer Software dar. "
    },
    {
        "start_time": 91359,
        "end_time": 100039,
        "text": "Das heißt, wenn wir beispielsweise solch eine Internetseite haben, dann wäre der Header, also diese Navigationsleiste da oben, eine Komponente. "
    },
    {
        "start_time": 100039,
        "end_time": 106598,
        "text": "Genauso hätten wir auch eine Komponente, um die einzelnen Module hier darzustellen. Also Modul 1, Modul 2, Modul 3. "
    },
    {
        "start_time": 106598,
        "end_time": 114759,
        "text": "Das ist alles die gleiche Komponente, nur mit verschiedenen Parametern. Deswegen hat sie immer ein anderes Bild und einen anderen Text. "
    },
    {
        "start_time": 114759,
        "end_time": 120280,
        "text": "Komponenten sind meistens verschachtelt. Bedeutet, ganz oben haben wir unsere App-Komponente. "
    },
    {
        "start_time": 120280,
        "end_time": 128280,
        "text": "Unsere App besteht aus einer Navigationsleiste und einem Container, wo wiederum weitere Unterkomponenten sind und zwar unsere Module. "
    },
    {
        "start_time": 128280,
        "end_time": 133840,
        "text": "Hier wird jetzt eine Komponente mehrfach eingebunden, allerdings immer mit verschiedenen Parametern. "
    },
    {
        "start_time": 133840,
        "end_time": 142480,
        "text": "Die Module bestehen wiederum aus weiteren Unterkomponenten, beispielsweise einem Head, also dem oberen Teil, und einem Body, also dem unteren Teil. "
    },
    {
        "start_time": 142480,
        "end_time": 149680,
        "text": "Eine React-Komponente hat meistens mindestens zwei Elemente. Einmal einen State und einmal eine Renderfunktion. "
    },
    {
        "start_time": 149680,
        "end_time": 155160,
        "text": "Der State sind letztendlich die Daten, die wir anzeigen wollen, wenn unsere Komponente gerendert wird. "
    },
    {
        "start_time": 155160,
        "end_time": 163160,
        "text": "Und die Renderfunktion, die ist dafür verantwortlich zu sagen, welche UI-Elemente jetzt angezeigt werden sollen in der Komponente. "
    },
    {
        "start_time": 163160,
        "end_time": 170159,
        "text": "Beispielsweise ein Text, ein Button oder ein Link. Wenn wir objektorientiert programmieren, wird das Ganze meistens so dargestellt. "
    },
    {
        "start_time": 170159,
        "end_time": 175400,
        "text": "Wir haben eine Klasse und diese Klasse heißt so, wie die Komponente heißen soll. "
    },
    {
        "start_time": 175400,
        "end_time": 181319,
        "text": "Dort sind jetzt zwei Dinge drin, einmal der State, wo dann später die Daten drin sind, und unsere Renderfunktion. "
    },
    {
        "start_time": 181319,
        "end_time": 187920,
        "text": "Zwischen diese geschweiften Klammern kommt dann der Code, den wir brauchen, um unsere UI-Elemente zu erstellen. "
    },
    {
        "start_time": 187920,
        "end_time": 195800,
        "text": "React heißt auf Deutsch so viel wie reagieren. Und das trifft es eigentlich schon ziemlich gut, denn wir reagieren auf Änderungen. "
    },
    {
        "start_time": 195800,
        "end_time": 203320,
        "text": "Das heißt, wenn sich beispielsweise die Daten in unserem State ändern, dann wollen wir darauf reagieren und etwas Neues anzeigen. "
    },
    {
        "start_time": 203320,
        "end_time": 212960,
        "text": "Also, ich würde sagen, wir legen direkt los. Um mit React arbeiten zu können, müssen wir natürlich erstmal "
    },
    {
        "start_time": 212960,
        "end_time": 218920,
        "text": "etwas Software auf unserem Computer installieren. Das erste, was wir benötigen, ist Node.js. "
    },
    {
        "start_time": 218920,
        "end_time": 228280,
        "text": "Node.js ist eine sogenannte Laufzeitumgebung für JavaScript. Bedeutet, mit anderen Worten, dass wir JavaScript auf unserem Computer ausführen können. "
    },
    {
        "start_time": 228280,
        "end_time": 234040,
        "text": "Das heißt, man könnte zum Beispiel ein Backend oder so was oder Desktop-Programme erstellen mit JavaScript. "
    },
    {
        "start_time": 234040,
        "end_time": 239159,
        "text": "Dafür brauchen wir Node.js jedoch nicht, denn ein React-Programm läuft ja einfach in unserem Webbrowser. "
    },
    {
        "start_time": 239159,
        "end_time": 243640,
        "text": "Was Node.js allerdings noch hat, ist der sogenannte Node Package Manager. "
    },
    {
        "start_time": 243640,
        "end_time": 248080,
        "text": "Mit diesen lässt sich zusätzlich Software auf unserem Computer über die Kommandozeile "
    },
    {
        "start_time": 248080,
        "end_time": 256680,
        "text": "installieren, wie beispielsweise React oder Programme, die eine React App automatisch für uns erzeugen. Deswegen müssen wir Node.js installieren. "
    },
    {
        "start_time": 256680,
        "end_time": 261000,
        "text": "Dafür gehst du einfach hier auf Download und dann hier halt einfach für Windows, Mac "
    },
    {
        "start_time": 261000,
        "end_time": 268199,
        "text": "oder für den Source Code, falls du beispielsweise Linux verwendest. Anschließend müssen wir natürlich auch noch irgendwie unseren Code schreiben. "
    },
    {
        "start_time": 268199,
        "end_time": 274400,
        "text": "Da brauchen wir einen Code Editor. Da nehmen wir den Standard, den wir eigentlich immer nehmen und zwar Visual Studio Code, "
    },
    {
        "start_time": 274400,
        "end_time": 277800,
        "text": "einfach hier auf Download drücken, falls du den noch nicht haben solltest. "
    },
    {
        "start_time": 277840,
        "end_time": 281759,
        "text": "Nachdem du alles installiert hast, solltest du deinen Computer unbedingt neu starten. "
    },
    {
        "start_time": 281759,
        "end_time": 288680,
        "text": "Anschließend öffnest du Visual Studio Code und das Ganze sieht dann so aus. Das ist unsere Base. Hier können wir jetzt starten. "
    },
    {
        "start_time": 292520,
        "end_time": 295720,
        "text": "Im nächsten Schritt legen wir jetzt unser allererstes Projekt an. "
    },
    {
        "start_time": 295720,
        "end_time": 302160,
        "text": "Dafür müssen wir erst einmal einen Ordner erstellen und diesen dann mit Visual Studio Code öffnen. "
    },
    {
        "start_time": 302160,
        "end_time": 306319,
        "text": "Dafür können wir hier einfach links oben auf File gehen und dann auf Open Folder. "
    },
    {
        "start_time": 306319,
        "end_time": 311000,
        "text": "Nachdem wir hier draufgegangen sind, können wir nun in den Ordner gehen, wo deine Projekte liegen. "
    },
    {
        "start_time": 311000,
        "end_time": 314839,
        "text": "Damit alles übersichtlich bleibt, empfehle ich dir das Ganze nicht auf deinem Desktop "
    },
    {
        "start_time": 314839,
        "end_time": 321079,
        "text": "zu platzieren, sondern ich habe das Ganze zum Beispiel hier einfach auf C slash Dev slash React Projects. "
    },
    {
        "start_time": 321079,
        "end_time": 325959,
        "text": "Da sind alle meine React Projekte drin und diesen Ordner wähle ich mir jetzt einmal aus. "
    },
    {
        "start_time": 325959,
        "end_time": 332719,
        "text": "Wenn ich jetzt hier oben auf Terminal drücke, kann ich unten ein neues Terminal öffnen. Das hier ist diese Eingabeaufforderung. "
    },
    {
        "start_time": 332720,
        "end_time": 337240,
        "text": "Das ist genau das gleiche, wie wenn du bei Windows hier links unten CMD eingeben würdest "
    },
    {
        "start_time": 337240,
        "end_time": 342400,
        "text": "und dieses Ding hier öffnest oder bei Mac in die Spotlight-Suche Terminal eingibst. "
    },
    {
        "start_time": 342400,
        "end_time": 352440,
        "text": "Um jetzt ein neues React Projekt anzulegen, musst du einfach den Befehl npx create-react-app eingeben. "
    },
    {
        "start_time": 352440,
        "end_time": 361320,
        "text": "Dieses npx startet automatisch ein Programm aus dem Internet namens create-react-app, was uns unser erstes React Projekt erstellt. "
    },
    {
        "start_time": 361399,
        "end_time": 368719,
        "text": "Wenn du unter Linux oder Mac arbeitest, musst du hier noch das Wort sudo davor schreiben. Damit führst du das Ganze als Administrator aus. "
    },
    {
        "start_time": 368719,
        "end_time": 374480,
        "text": "Bevor du jetzt auf Enter drückst, musst du hier hinter noch einen weiteren Parameter eingeben und zwar den Namen deines Projektes. "
    },
    {
        "start_time": 374480,
        "end_time": 382159,
        "text": "Ich nenne das jetzt einfach mal mein-online-shop und drücke auf Enter. "
    },
    {
        "start_time": 382159,
        "end_time": 387319,
        "text": "Nachdem alles durchgelaufen ist, sehen wir jetzt hier an der Seite einen neuen Ordner, der erstellt wurde. "
    },
    {
        "start_time": 387319,
        "end_time": 394279,
        "text": "Das heißt mein-online-shop und hier ist jetzt unser React Projekt zu finden. Hier steht auch gleich, wie wir das Ganze starten können. "
    },
    {
        "start_time": 394279,
        "end_time": 400199,
        "text": "Wir müssen erstmal in den Ordner wechseln. Das heißt, wir müssen von diesem Terminal in diesen Ordner wechseln. "
    },
    {
        "start_time": 400199,
        "end_time": 405240,
        "text": "Das geht mit dem Befehl cd, das steht für Change Directory und hier gebe ich jetzt mein-online-shop "
    },
    {
        "start_time": 405240,
        "end_time": 411159,
        "text": "ein und anschließend kann ich das Ganze auch starten, indem ich den Befehl npm start eingebe. "
    },
    {
        "start_time": 411159,
        "end_time": 422280,
        "text": "Außerdem möchte ich in VS Code noch eine extra Extension, also eine Erweiterung installieren und zwar diese hier. Die heißt Simple React Snippets. "
    },
    {
        "start_time": 422280,
        "end_time": 429160,
        "text": "Das gibst du einfach hier oben ein und drückst hier drauf. Ich habe das Ganze bei mir schon installiert und mit dieser Erweiterung hast du gleich "
    },
    {
        "start_time": 429160,
        "end_time": 435400,
        "text": "noch die Möglichkeit, um einiges komfortabler zu programmieren, als du das ohnehin schon mit React machen kannst. "
    },
    {
        "start_time": 435400,
        "end_time": 441040,
        "text": "Durch den Befehl, den du hier eingegeben hast, geht jetzt in meinem Webbrowser dieses Ding hier auf. "
    },
    {
        "start_time": 441040,
        "end_time": 449680,
        "text": "Hier ist unsere Start-App in React und damit können wir jetzt entweder weiterarbeiten oder wir können jetzt einfach eine ganz neue App anlegen. "
    },
    {
        "start_time": 449680,
        "end_time": 456600,
        "text": "Wenn wir uns die Ordnerstruktur angucken, dann sehen wir hier auch schon einige Dateien und einige Ordner. Hier steht zum Beispiel package.json. "
    },
    {
        "start_time": 456600,
        "end_time": 461860,
        "text": "Hier stehen letztendlich alle Libraries, also alle Erweiterungen für JavaScript drin, die "
    },
    {
        "start_time": 461860,
        "end_time": 468000,
        "text": "installiert wurden und die befinden sich in dem Ordner Noten Modules. Das müssen wir uns jetzt gar nicht groß angucken. "
    },
    {
        "start_time": 468079,
        "end_time": 474759,
        "text": "Readme.md ist einfach nochmal eine kleine Dokumentation, wo ein paar Infos stehen. Dann gibt es noch package.log. "
    },
    {
        "start_time": 474759,
        "end_time": 479680,
        "text": "Hier steht drin, was seit der letzten Installation alles installiert wurde, also in diesem Fall "
    },
    {
        "start_time": 479680,
        "end_time": 485759,
        "text": "alles und gitignore brauchen wir, wenn wir mit Git arbeiten wollen. Das machen wir jetzt erst einmal aber noch nicht. "
    },
    {
        "start_time": 485759,
        "end_time": 491759,
        "text": "Git ist eine Versionskontrolle, das heißt, da können wir unseren Code in allen Versionen online in der Cloud abspeichern. "
    },
    {
        "start_time": 491759,
        "end_time": 499360,
        "text": "Dann gibt es noch den Ordner public. Da befindet sich unsere fertige Internetseite drin und den Ordner source. Das steht für source code. "
    },
    {
        "start_time": 499360,
        "end_time": 502920,
        "text": "Hier befindet sich unser Quellcode und das ist der Ordner, an dem wir uns hauptsächlich "
    },
    {
        "start_time": 502920,
        "end_time": 510159,
        "text": "bewegen werden, denn hier befindet sich alles, was mit der Programmierung zu tun hat. Hier sind jetzt erst einmal einige, einige Dateien. "
    },
    {
        "start_time": 510159,
        "end_time": 516519,
        "text": "Was wir aber jetzt erst einmal machen wollen, ist einfach alles hier komplett zu löschen, denn wir wollen ja wirklich bei Null anfangen. "
    },
    {
        "start_time": 516519,
        "end_time": 521360,
        "text": "Also drücke ich einfach auf entfernen, sage move to recycle bin und jetzt haben wir hier "
    },
    {
        "start_time": 521360,
        "end_time": 524319,
        "text": "einen komplett leeren Ordner und fangen erst einmal von Null an. "
    },
    {
        "start_time": 524400,
        "end_time": 531520,
        "text": "Wir legen hier eine neue Datei in dem Ordner an mit Rechtsklick und new file und nennen diese Datei index.js. "
    },
    {
        "start_time": 531520,
        "end_time": 537200,
        "text": "Dann drücken wir auf Enter und haben jetzt eine komplett leere Datei. Und das hier ist die Base für unser Programm. "
    },
    {
        "start_time": 537200,
        "end_time": 542640,
        "text": "Das heißt, alles, was wir hier reinschreiben, wird dann automatisch die Base für unsere Internetseite sein. "
    },
    {
        "start_time": 542640,
        "end_time": 547640,
        "text": "Das erste, was wir jetzt hier machen müssen, ist natürlich React zu importieren. "
    },
    {
        "start_time": 547640,
        "end_time": 555000,
        "text": "Das heißt, ich muss jetzt hier sowas schreiben wie import React from. Warum schreiben wir das genau so? "
    },
    {
        "start_time": 555000,
        "end_time": 559839,
        "text": "Das erste ist, was wir importieren wollen und das zweite ist, aus welcher Library wir das importieren wollen. "
    },
    {
        "start_time": 559839,
        "end_time": 566399,
        "text": "Die Library heißt React und die Funktion, die wir jetzt hier reinkopieren wollen oder das Element heißt ebenfalls React. "
    },
    {
        "start_time": 566399,
        "end_time": 576439,
        "text": "Das zweite, was wir brauchen, ist etwas, das nennt sich React Dom. Dafür schreiben wir import React Dom from. Jetzt wird es interessant. "
    },
    {
        "start_time": 576439,
        "end_time": 586199,
        "text": "React minus Dom. Heißt tatsächlich so und nachdem wir das ganze geschrieben haben, können wir jetzt bereits anfangen zu programmieren. "
    },
    {
        "start_time": 586199,
        "end_time": 590959,
        "text": "Was wir natürlich auf unserer Seite immer als erstes machen wollen, ist das obligatorische Hello World. "
    },
    {
        "start_time": 590959,
        "end_time": 595679,
        "text": "Mit Hello World können wir auf unserer Seite letztendlich einfach anzeigen, ob das Ganze funktioniert. "
    },
    {
        "start_time": 595679,
        "end_time": 600000,
        "text": "Dafür kann ich jetzt einfach mal etwas anlegen und zwar eine Variab- "
    },
    {
        "start_time": 600000,
        "end_time": 606000,
        "text": "die nenne ich Element und die bekommt jetzt HTML Code zugewiesen. Das heißt, ich schreibe hier "
    },
    {
        "start_time": 606000,
        "end_time": 612840,
        "text": "H1, Hello World. Viele Leute werden jetzt bereits sehen, okay, hier steht jetzt HTML Code drin, "
    },
    {
        "start_time": 612840,
        "end_time": 617799,
        "text": "aber das Ganze ist ja nicht in Anführungszeichen. Eigentlich müsste ja sowas immer so ein "
    },
    {
        "start_time": 617799,
        "end_time": 623559,
        "text": "Anführungszeichen sein. Das ist bei React allerdings nicht so, denn es handelt sich hier nicht um echten "
    },
    {
        "start_time": 623559,
        "end_time": 630639,
        "text": "HTML Code, sondern um Pseudo-HTML Code. Das Ganze wird später in echten HTML Code umgewandelt. Das "
    },
    {
        "start_time": 630639,
        "end_time": 635679,
        "text": "heißt, wir können hier tatsächlich ohne Anführungszeichen schreiben. Dieses H1 Element "
    },
    {
        "start_time": 635679,
        "end_time": 640879,
        "text": "ist jetzt ein ganz normales HTML Element später und das müssen wir jetzt zu unserer Seite "
    },
    {
        "start_time": 640879,
        "end_time": 648240,
        "text": "hinzufügen. Und dafür brauchen wir diesen React DOM. DOM steht für Document Object Model und "
    },
    {
        "start_time": 648240,
        "end_time": 654120,
        "text": "repräsentiert letztendlich immer unseren HTML Code auf unserer Seite. Allerdings haben wir hier "
    },
    {
        "start_time": 654120,
        "end_time": 659960,
        "text": "einen eigenen, einen virtuellen DOM. Das heißt, wir haben einen eigenen Baum an HTML Elementen, "
    },
    {
        "start_time": 659960,
        "end_time": 666360,
        "text": "die aber noch nicht real sind, sondern in diesem Fake HTML letztendlich und React generiert daraus "
    },
    {
        "start_time": 666360,
        "end_time": 673080,
        "text": "das echte HTML. Wir können jetzt einfach sagen reactdom.render und sagen, dass wir das Element, "
    },
    {
        "start_time": 673080,
        "end_time": 678080,
        "text": "also unsere Überschrift, rendern wollen. Jetzt müssen wir natürlich noch sagen, wohin das ganze "
    },
    {
        "start_time": 678080,
        "end_time": 683440,
        "text": "gerendert wird. Und dafür müssen wir einmal in den Public Ordner gucken. Eine Internetseite fängt "
    },
    {
        "start_time": 683440,
        "end_time": 688759,
        "text": "immer an mit einer Datei namens index.html. Hier steht jetzt auch schon so ein bisschen was drin, "
    },
    {
        "start_time": 688759,
        "end_time": 694480,
        "text": "aber eigentlich ist es doch ziemlich leer. Bei einer HTML Seite sagen wir im Het-Bereich immer "
    },
    {
        "start_time": 694480,
        "end_time": 701319,
        "text": "nur jede Menge Konfiguration und Meta-Informationen über unsere Seite. Das heißt, Theme Color zum "
    },
    {
        "start_time": 701319,
        "end_time": 706600,
        "text": "Beispiel, irgendwas zu einem Icon, was für eine Breite die Seite haben soll, was für einen Titel "
    },
    {
        "start_time": 706600,
        "end_time": 712000,
        "text": "und so weiter und so fort. Im Buddy, da kommt das eigentlich interessante rein. Und wenn wir uns den "
    },
    {
        "start_time": 712000,
        "end_time": 717600,
        "text": "Buddy angucken, dann sehen wir hier sehr interessant nämlich zwei Sachen. Einmal dieses hier, das wird "
    },
    {
        "start_time": 717600,
        "end_time": 721919,
        "text": "nur ausgeführt, wenn der Webbrowser aus irgendeinem Grund keinen JavaScript unterstützt. Dann wird "
    },
    {
        "start_time": 721919,
        "end_time": 727360,
        "text": "einfach gesagt, hey, you need to enable JavaScript to run this app. Und dann haben wir auf der anderen "
    },
    {
        "start_time": 727360,
        "end_time": 733879,
        "text": "Seite noch das hier, einen leeren DIV-Container. Ein DIV-Container hat einfach hier eine ID namens "
    },
    {
        "start_time": 733879,
        "end_time": 739600,
        "text": "root und was wir jetzt machen können, ist mit JavaScript auf diesen Container zuzugreifen und "
    },
    {
        "start_time": 739600,
        "end_time": 745279,
        "text": "dann in diesen Container Content hinzuzufügen. Und das Ganze übernimmt jetzt React. Das heißt, "
    },
    {
        "start_time": 745279,
        "end_time": 750440,
        "text": "wir müssen einfach auf diesen Container hier zugreifen und müssen dieses Element hier als "
    },
    {
        "start_time": 750440,
        "end_time": 755799,
        "text": "zweiten Parameter in diese Methode von React einfügen. Das heißt, hier kommt jetzt rein "
    },
    {
        "start_time": 755799,
        "end_time": 762680,
        "text": "document getElementByID root. Und nachdem wir das Ganze gemacht haben, kommt natürlich am Ende "
    },
    {
        "start_time": 762680,
        "end_time": 767960,
        "text": "von jeder Seite noch ein Semikolon und damit sind wir auch schon fertig. Und wir sehen auch schon, "
    },
    {
        "start_time": 767960,
        "end_time": 773720,
        "text": "dass hier jetzt steht Webpack compiled successfully. Die URL können wir jetzt wieder öffnen, "
    },
    {
        "start_time": 773720,
        "end_time": 779000,
        "text": "indem ich hier einfach die Steuerungstaste drücke oder Command und dann drücke ich hier drauf und "
    },
    {
        "start_time": 779000,
        "end_time": 784440,
        "text": "dann geht das Ganze in meinem Webbrowser auf und wir sehen jetzt hier Folgendes. Eine Internetseite, "
    },
    {
        "start_time": 784440,
        "end_time": 789960,
        "text": "wo einfach Hello World steht. Und wenn wir uns das Ganze mal untersuchen, das kann ich immer mit einem "
    },
    {
        "start_time": 789960,
        "end_time": 796120,
        "text": "Rechtsklick und Untersuchen machen, dann sehe ich hier, dass dieses h1 Element einfach in unsere "
    },
    {
        "start_time": 796120,
        "end_time": 802240,
        "text": "Indexseite eingebettet wurde. Das heißt, wir gucken uns das Ganze noch mal hier an und splitten das "
    },
    {
        "start_time": 802240,
        "end_time": 807360,
        "text": "Ganze mal kurz auf, dann sehen wir das. Wir haben hier eine Seite, die sieht so aus, das ist die "
    },
    {
        "start_time": 807360,
        "end_time": 813440,
        "text": "Base für jede einzelne Seite, die wir haben. Und hier auf der linken Seite in der JavaScript-Datei "
    },
    {
        "start_time": 813440,
        "end_time": 818960,
        "text": "haben wir uns jetzt ein weiteres HTML-Element definiert. Und dieses HTML-Element, das wird "
    },
    {
        "start_time": 818960,
        "end_time": 824440,
        "text": "jetzt hier in diesen DIV-Container, also hier, zack, eingesetzt. Und somit haben wir es bereits "
    },
    {
        "start_time": 824440,
        "end_time": 829519,
        "text": "geschafft, Hello World zu bauen und damit haben wir unsere erste Startseite erstellt. "
    },
    {
        "start_time": 833519,
        "end_time": 837360,
        "text": "Nachdem wir jetzt also unser Hello World angelegt haben, wird es im nächsten Schritt Zeit, unseren "
    },
    {
        "start_time": 837360,
        "end_time": 843480,
        "text": "Online-Shop zusammen zu basteln. Und dafür brauchen wir natürlich Komponenten. Wir wollen nicht alles "
    },
    {
        "start_time": 843480,
        "end_time": 849120,
        "text": "in eine Datei schreiben, so wie es jetzt hier ist, sondern wir wollen uns mehrere Komponenten anlegen. "
    },
    {
        "start_time": 849120,
        "end_time": 854679,
        "text": "Und damit fangen wir jetzt an. Da wir bei einer App sehr schnell sehr viele Komponenten haben können, "
    },
    {
        "start_time": 854679,
        "end_time": 859839,
        "text": "empfehle ich immer, in diesem Source-Ordner einen neuen Unterordner anzulegen und den Components zu "
    },
    {
        "start_time": 859839,
        "end_time": 864799,
        "text": "nennen. Da packen wir dann all unsere Komponenten rein. Das heißt, wenn ich jetzt zum Beispiel "
    },
    {
        "start_time": 864799,
        "end_time": 870120,
        "text": "unsere Navigationsleiste als erstes machen möchte, dann würde ich jetzt hier eine neue Datei "
    },
    {
        "start_time": 870120,
        "end_time": 876920,
        "text": "reinschreiben und zwar navbar.js. Wir können übrigens mit JavaScript schreiben, mit TypeScript "
    },
    {
        "start_time": 876920,
        "end_time": 883039,
        "text": "schreiben oder mit etwas, das heißt JSX. Das hier würde ich erst einmal empfehlen. Dann klappt das "
    },
    {
        "start_time": 883039,
        "end_time": 888000,
        "text": "mit der Autovervollständigung und der Darstellung meistens noch mal etwas besser. In dieser Komponente "
    },
    {
        "start_time": 888000,
        "end_time": 891879,
        "text": "müssen wir jetzt natürlich wieder erstmal diesen Standardaufbau reinschreiben. Das Gute ist, "
    },
    {
        "start_time": 891879,
        "end_time": 896639,
        "text": "dass wir uns ja diese Erweiterung namens React Snippets installiert haben. Damit kann ich jetzt "
    },
    {
        "start_time": 896639,
        "end_time": 902039,
        "text": "einfach schreiben imrc und anschließend auf Enter drücken und dann ist dieses Standard Import "
    },
    {
        "start_time": 902039,
        "end_time": 906599,
        "text": "Statement bereits vorhanden. Das Gleiche kann ich jetzt auch machen, um den gesamten Code für eine "
    },
    {
        "start_time": 906599,
        "end_time": 911399,
        "text": "Komponente zu schreiben. Dafür schreibe ich einfach cc und drücke auf Enter und wir sehen, "
    },
    {
        "start_time": 911399,
        "end_time": 916919,
        "text": "dass wir jetzt bereits eine komplette JavaScript-Klasse angelegt haben. Wir müssen jetzt nur noch sagen, "
    },
    {
        "start_time": 916919,
        "end_time": 922680,
        "text": "wie das Ganze heißt und zwar navbar. Wir sehen außerdem, dass wenn ich anfange zu tippen, "
    },
    {
        "start_time": 922680,
        "end_time": 927920,
        "text": "automatische mehreren Zeilen getippt wird. Denn wir arbeiten hier mit einer sogenannten "
    },
    {
        "start_time": 927920,
        "end_time": 933799,
        "text": "Module-Struktur. Das heißt, unsere Komponente wird immer in solch einer Klasse hier erstellt und "
    },
    {
        "start_time": 933799,
        "end_time": 939799,
        "text": "die wird dann am Ende der Datei exportiert. In unserer index.js können wir das Ganze jetzt "
    },
    {
        "start_time": 939799,
        "end_time": 944960,
        "text": "wieder importieren. Das heißt, hier kommt jetzt noch ein bisschen Code rein, zum Beispiel nav und "
    },
    {
        "start_time": 944960,
        "end_time": 949160,
        "text": "anschließend sind wir hier eigentlich schon fertig. Ich schreibe jetzt einfach mal Navigation rein, "
    },
    {
        "start_time": 949279,
        "end_time": 955440,
        "text": "das können wir später immer noch umändern. Das hier ist HTML-Code bzw. dieser möchte gern "
    },
    {
        "start_time": 955440,
        "end_time": 960120,
        "text": "HTML-Code, der eigentlich kein echter ist und diese navbar, die können wir jetzt hier statt "
    },
    {
        "start_time": 960120,
        "end_time": 967640,
        "text": "diesem Element importieren. Das heißt, ich sage hier ist einfach import navbar from und jetzt sage "
    },
    {
        "start_time": 967640,
        "end_time": 974160,
        "text": "ich, woher ich das importieren möchte und zwar aus dem Ordner kom-components und dann slash navbar "
    },
    {
        "start_time": 974360,
        "end_time": 978960,
        "text": "und anschließend können wir das Ding jetzt hier verwenden. Das heißt, ich kann jetzt hier einfach "
    },
    {
        "start_time": 978960,
        "end_time": 983680,
        "text": "sagen, zack navbar, das schreibt man dann immer so rein. Hier oben muss man noch so einen Punkt und "
    },
    {
        "start_time": 983680,
        "end_time": 989799,
        "text": "slash davor schreiben, ganz wichtig und anschließend wird jetzt unsere navbar in unserer Applikation "
    },
    {
        "start_time": 989799,
        "end_time": 994360,
        "text": "gerendert. Wir sehen jetzt außerdem noch eine ganz interessante Sache. Wenn ich noch mal ein paar "
    },
    {
        "start_time": 994360,
        "end_time": 999120,
        "text": "Schritte zurückgehe, dann sehen wir, dass ich hier das Element einfach so erstellt habe und "
    },
    {
        "start_time": 999120,
        "end_time": 1004879,
        "text": "hinzugefügt habe. Hier hingegen haben wir mit einer sogenannten Klasse gearbeitet. Beides ist "
    },
    {
        "start_time": 1004879,
        "end_time": 1009559,
        "text": "möglich in React, egal ob wir objektorientiert, so heißt das nämlich, oder nicht objektorientiert, "
    },
    {
        "start_time": 1009559,
        "end_time": 1014720,
        "text": "arbeiten wollen, aber das hier ist mehr Industriestandard, deswegen würde ich empfehlen, "
    },
    {
        "start_time": 1014720,
        "end_time": 1018480,
        "text": "auch wenn es ein bisschen mehr Code ist, immer so zu schreiben. Das ist auch ein bisschen "
    },
    {
        "start_time": 1018480,
        "end_time": 1023120,
        "text": "übersichtlicher, denn man sieht hier, man hat immer einfach ein so ein Ding, das geht hier oben auf, "
    },
    {
        "start_time": 1023120,
        "end_time": 1027359,
        "text": "das geht hier unten zu und hier wird unser gesamter Code jetzt reingeschrieben. Das heißt, "
    },
    {
        "start_time": 1027359,
        "end_time": 1031559,
        "text": "ich würde empfehlen, das immer so nach dieser Formel zu schreiben und dann einfach hier so "
    },
    {
        "start_time": 1031559,
        "end_time": 1036839,
        "text": "zu importieren. Wenn ich unsere Seite jetzt aufmache, dann sehen wir auch, dass hier unsere "
    },
    {
        "start_time": 1036839,
        "end_time": 1047960,
        "text": "Navigation oben so existiert. Das hier soll kein CSS Tutorial werden, sondern ein React Tutorial. "
    },
    {
        "start_time": 1047960,
        "end_time": 1051840,
        "text": "Genau aus diesem Grund bauen wir jetzt keine Komponenten hier Stück für Stück zusammen, "
    },
    {
        "start_time": 1052079,
        "end_time": 1057400,
        "text": "sondern wir nehmen fertige Komponenten aus dem CSS Framework Bootstrap. Mit Bootstrap hast du "
    },
    {
        "start_time": 1057400,
        "end_time": 1062240,
        "text": "die Möglichkeit, einfach so fertige Komponenten, wie beispielsweise eine Navigationsleiste oder "
    },
    {
        "start_time": 1062240,
        "end_time": 1066759,
        "text": "sowas, wenn du hier mal nach NAV sitzt oder NAVBar einfach mit einzubinden. Das heißt, "
    },
    {
        "start_time": 1066759,
        "end_time": 1073039,
        "text": "du hast hier an der Seite links bereits jede Menge verschiedene Elemente und dann kannst du diese "
    },
    {
        "start_time": 1073039,
        "end_time": 1078400,
        "text": "jetzt hier einfach raussuchen und einfach in dein Projekt importieren. Hier haben wir eine relativ "
    },
    {
        "start_time": 1078400,
        "end_time": 1083599,
        "text": "komplexe NAVBar. Wenn wir hier runtergehen, haben wir hier noch eine ganz leichte und es gibt hier "
    },
    {
        "start_time": 1083599,
        "end_time": 1089839,
        "text": "einmal natürlich HTML-Code mit CSS Klassen. Gleichzeitig gibt es aber auch noch natürlich "
    },
    {
        "start_time": 1089839,
        "end_time": 1095039,
        "text": "JavaScript und eine CSS Datei, die hier importiert werden muss und das können wir auch in React "
    },
    {
        "start_time": 1095039,
        "end_time": 1101759,
        "text": "wiederum ganz einfach machen. Wir packen uns jetzt erstmal die NAVBar hier rein. Zack. Nachdem wir "
    },
    {
        "start_time": 1101759,
        "end_time": 1105799,
        "text": "das Ganze gemacht haben und das hier irgendwie schön eingerückt haben, kriegen wir jetzt ein "
    },
    {
        "start_time": 1105799,
        "end_time": 1111200,
        "text": "kleines Problem und zwar darf man dieses Class hier nicht verwenden. In normalem HTML können wir "
    },
    {
        "start_time": 1111200,
        "end_time": 1116519,
        "text": "sagen, wie ein HTML Element aussehen soll mit einer CSS Klasse. Dafür benutzt man ja dieses "
    },
    {
        "start_time": 1116519,
        "end_time": 1122119,
        "text": "Class hier. Allerdings existiert das Class ja auch in JavaScript. Genau aus diesem Grund muss man bei "
    },
    {
        "start_time": 1122119,
        "end_time": 1128480,
        "text": "React die HTML Klassen nicht Class nennen, sondern Class Name. Dann kriegen wir noch so einen kleinen "
    },
    {
        "start_time": 1128480,
        "end_time": 1131880,
        "text": "Fehler, weil hier so eine Raute drin steht. Hier schreibe ich jetzt einfach mal so einen Slash rein "
    },
    {
        "start_time": 1131880,
        "end_time": 1137400,
        "text": "und dann haben wir keinen Fehler mehr. Jetzt müssen wir Bootstrap noch zu unserer Seite oder zu unserem "
    },
    {
        "start_time": 1137400,
        "end_time": 1142360,
        "text": "Projekt hinzufügen. Dafür können wir wieder den Node Package Manager nehmen und einfach sagen npm "
    },
    {
        "start_time": 1142360,
        "end_time": 1149240,
        "text": "install minus minus save Bootstrap und anschließend passieren jetzt zwei Sachen. Zum einen wird "
    },
    {
        "start_time": 1149240,
        "end_time": 1155119,
        "text": "Bootstrap, weil es jetzt Teil von unserem Projekt ist, hier in diese Liste mit diesen Dependencies "
    },
    {
        "start_time": 1155119,
        "end_time": 1160559,
        "text": "hinzugefügt. Da sehen wir das Ganze und außerdem wird ja alles, was hier bei Dependencies steht, "
    },
    {
        "start_time": 1160559,
        "end_time": 1165599,
        "text": "automatisch in den Ordner Node Modules heruntergeladen. Das heißt, hier haben wir jetzt einen neuen "
    },
    {
        "start_time": 1165599,
        "end_time": 1173239,
        "text": "Ordner namens Bootstrap. Dafür schreien wir hier ein bisschen runter und da müsste er sein. Hier "
    },
    {
        "start_time": 1173239,
        "end_time": 1179759,
        "text": "haben wir jetzt einen Ordner namens dist.css und hier haben wir jetzt jede Menge CSS Code. Unteranderem "
    },
    {
        "start_time": 1179759,
        "end_time": 1184359,
        "text": "auch diese hier. .min steht ja immer dafür, dass alles minimiert ist. Das heißt, diese ganzen "
    },
    {
        "start_time": 1184359,
        "end_time": 1190119,
        "text": "einzelnen CSS Dateien, die hier existieren, wurden hier in dieser .min Datei etwas unübersichtlich, "
    },
    {
        "start_time": 1190119,
        "end_time": 1193920,
        "text": "aber für unsere Zwecke perfekt einfach zusammengefasst und minimiert. Das heißt, "
    },
    {
        "start_time": 1193920,
        "end_time": 1199440,
        "text": "wir müssen nur diese Datei importieren und das Ganze können wir hier einfach in unserer Navbar "
    },
    {
        "start_time": 1200000,
        "end_time": 1205880,
        "text": "beziehungsweise auch einfach in unserer index.js. Das heißt, wir schreiben hier einfach import und "
    },
    {
        "start_time": 1205880,
        "end_time": 1210039,
        "text": "müssen jetzt den Pfad von diesem Ordner hier angeben. Und das Ganze kann schon mal ein bisschen "
    },
    {
        "start_time": 1210039,
        "end_time": 1215640,
        "text": "nervig sein, deswegen kann man hier auch einfach rechtsklicken und sagen copy relative path und "
    },
    {
        "start_time": 1215640,
        "end_time": 1220680,
        "text": "das hier zwischen die Anführungszeichen so hin und her einfügen. Ja, jetzt müssen wir noch minimal "
    },
    {
        "start_time": 1220680,
        "end_time": 1225640,
        "text": "hier etwas ändern. Dieses Node Modules und so weiter brauchen wir nicht am Anfang. Das heißt, "
    },
    {
        "start_time": 1225640,
        "end_time": 1230079,
        "text": "das kann weg. Wir wollen die vorwärtszeigenden Slashes haben, die müssen hier noch eingefügt "
    },
    {
        "start_time": 1230079,
        "end_time": 1235160,
        "text": "werden und anschließend klappt das Ganze. Jetzt können wir hier wieder sagen npm start, "
    },
    {
        "start_time": 1235160,
        "end_time": 1239200,
        "text": "um unser Projekt wieder neu zu starten. Und wie wir sehen, haben wir jetzt unsere "
    },
    {
        "start_time": 1239200,
        "end_time": 1244000,
        "text": "Navigationsleiste hier oben bereits eingefügt. Das heißt, wir haben eine Bootstrap Komponente "
    },
    {
        "start_time": 1244000,
        "end_time": 1250079,
        "text": "genommen und diese mit diesem HTML Code importiert, gleichzeitig hier oben jetzt das Ganze gestyled, "
    },
    {
        "start_time": 1250079,
        "end_time": 1258759,
        "text": "dadurch, dass wir die CSS Datei hier importiert haben. Im nächsten Schritt wollen wir jetzt "
    },
    {
        "start_time": 1258759,
        "end_time": 1263519,
        "text": "natürlich ein paar Produkte zu unserem Online Shop hinzufügen und dafür brauchen wir erstmal "
    },
    {
        "start_time": 1263519,
        "end_time": 1268279,
        "text": "so eine Schickkarte, wo das Ganze angezeigt wird. Und das Gute ist, wenn wir durch die Bootstrap "
    },
    {
        "start_time": 1268279,
        "end_time": 1272240,
        "text": "Komponenten gehen, dann sehen wir hier auch gleich was ganz Schickes und zwar habe ich hier einfach "
    },
    {
        "start_time": 1272240,
        "end_time": 1276519,
        "text": "links auf Cart gedrückt und dann dieses Ding hier gefunden. Hier können wir jetzt einfach noch ein "
    },
    {
        "start_time": 1276519,
        "end_time": 1280640,
        "text": "paar Bilder einfügen und dann eigentlich diese Karte hier komplett übernehmen. Und hier steht "
    },
    {
        "start_time": 1280640,
        "end_time": 1285920,
        "text": "ja schon, wie das HTML Gerüst aussehen soll. Das heißt, wir gehen jetzt einfach in unseren Code und "
    },
    {
        "start_time": 1285920,
        "end_time": 1291240,
        "text": "legen hier eine neue Komponente an. Ich mache diese Notenmodules hier einfach mal wieder zu und sage "
    },
    {
        "start_time": 1291240,
        "end_time": 1298000,
        "text": "jetzt hier im Ordner Components, dass ich eine neue Komponente namens product anlegen möchte. Und das "
    },
    {
        "start_time": 1298000,
        "end_time": 1303599,
        "text": "Ganze hat wieder die Endung JSX. Anschließend kann ich jetzt hier einfach wieder sagen, dass ich "
    },
    {
        "start_time": 1303599,
        "end_time": 1311200,
        "text": "schreibe CC, um meine Standard Komponente hier anzulegen. Product nenne ich das Ganze und als "
    },
    {
        "start_time": 1311200,
        "end_time": 1317680,
        "text": "HTML Code bekommt sie einfach das hier. Wichtig ist, dass wir überall wo Class steht das Ganze "
    },
    {
        "start_time": 1317680,
        "end_time": 1325200,
        "text": "wieder umändern müssen. Also hier, hier, hier, hier und hier und zwar in Class Name. Anschließend "
    },
    {
        "start_time": 1325200,
        "end_time": 1330240,
        "text": "müssen wir auch noch React importieren, das heißt EMRC, dann auf Enter und dann haben wir hier die "
    },
    {
        "start_time": 1330240,
        "end_time": 1336640,
        "text": "React bzw. React und Component hier importiert. Das Ganze wird jetzt hier unten noch exportiert. "
    },
    {
        "start_time": 1336640,
        "end_time": 1340640,
        "text": "Hier sehen wir aber noch, dass etwas rot ist und das liegt sehr wahrscheinlich hier ran, dass hier "
    },
    {
        "start_time": 1340640,
        "end_time": 1345240,
        "text": "irgendwie drei komische Punkte drin sind. Da müssen wir jetzt natürlich noch ein Bild einfügen. "
    },
    {
        "start_time": 1345240,
        "end_time": 1350039,
        "text": "Kostenlose Bilder findest du zum Beispiel auf pixabay.com, geh da einfach mal drauf und wir "
    },
    {
        "start_time": 1350039,
        "end_time": 1354440,
        "text": "laden uns jetzt einfach mal etwas Gemüse herunter und zwar hier in der geringsten Auflösung, "
    },
    {
        "start_time": 1354440,
        "end_time": 1358599,
        "text": "damit die Seite nicht so lange lädt. Du solltest immer eine nehmen, so dass es noch scharf aussieht, "
    },
    {
        "start_time": 1358599,
        "end_time": 1363240,
        "text": "allerdings die Bildergröße nicht zu groß ist. Für Bilder brauchen wir natürlich einen neuen "
    },
    {
        "start_time": 1363240,
        "end_time": 1368079,
        "text": "Ordner, ich nenne den einfach mal Assets und packe in diesen Ordner noch ein Unterordner namens "
    },
    {
        "start_time": 1368079,
        "end_time": 1374119,
        "text": "img. Da ziehe ich jetzt das Bild aus meinem Download Ordner rein und benenne es noch um und "
    },
    {
        "start_time": 1374119,
        "end_time": 1380160,
        "text": "zwar in Tomatoes. Das Bild können wir jetzt einfach hier bei Source hinzufügen, allerdings "
    },
    {
        "start_time": 1380160,
        "end_time": 1383759,
        "text": "müssen wir noch ein paar Sachen ändern. Wenn ich hier rüber gehe steht hier zum Beispiel "
    },
    {
        "start_time": 1383759,
        "end_time": 1390160,
        "text": "Image has no corresponding closing tag. Wir arbeiten hier mit einer Art XML und dementsprechend "
    },
    {
        "start_time": 1390160,
        "end_time": 1396839,
        "text": "muss man HTML-Elemente, die sich nicht schließen, immer am Ende mit solch einem Slash schließen. "
    },
    {
        "start_time": 1396839,
        "end_time": 1401440,
        "text": "Das heißt ein Image geht nicht wieder zu und dementsprechend müssen wir hier am Ende sagen, "
    },
    {
        "start_time": 1401440,
        "end_time": 1404799,
        "text": "dass hier noch so ein Slash reinkommt. Außerdem haben wir hier noch ein Class, "
    },
    {
        "start_time": 1404799,
        "end_time": 1409799,
        "text": "was eigentlich ClassName heißen muss und jetzt müssen wir das Ganze noch irgendwie sichtbar "
    },
    {
        "start_time": 1409799,
        "end_time": 1415039,
        "text": "machen. Das heißt ich schreibe jetzt hier erstmal nicht nachbar rein, sondern Product und "
    },
    {
        "start_time": 1415039,
        "end_time": 1419559,
        "text": "anschließend sehen wir auch, dass es hier schon automatisch von React importiert wird. "
    },
    {
        "start_time": 1419559,
        "end_time": 1423960,
        "text": "Wenn wir unsere Seite jetzt öffnen, sehen wir allerdings noch nichts und deswegen empfehle "
    },
    {
        "start_time": 1423960,
        "end_time": 1427839,
        "text": "ich dir immer in dem Chrome Browser einfach hier auf Untersuchen zu gehen und dann hier diese "
    },
    {
        "start_time": 1427839,
        "end_time": 1432920,
        "text": "Konsole auszuwählen, denn hier verrät der React immer schon sehr genau, was der Fehler ist. "
    },
    {
        "start_time": 1432920,
        "end_time": 1439680,
        "text": "Hier unten steht the style prop expects a mapping from style properties to values. Was soll das jetzt "
    },
    {
        "start_time": 1439680,
        "end_time": 1444319,
        "text": "schon wieder heißen? Hört sich erstmal kompliziert an, aber hier unten steht, dass man einfach style "
    },
    {
        "start_time": 1444319,
        "end_time": 1449039,
        "text": "ein bisschen anders schreiben muss. Wenn wir jetzt einfach mal diesen Fehler kopieren und bei Google "
    },
    {
        "start_time": 1449039,
        "end_time": 1453559,
        "text": "eingeben, was ich dir auch immer gerade als Anfänger empfehlen würde, dann sehen wir auch "
    },
    {
        "start_time": 1453559,
        "end_time": 1459319,
        "text": "hier genau, was man machen muss und zwar müssen wir bei React jetzt auf einmal styles statt style "
    },
    {
        "start_time": 1459319,
        "end_time": 1464680,
        "text": "schreiben und müssen das hier ein bisschen anders von der Syntax her schreiben. Das Ganze testen wir "
    },
    {
        "start_time": 1464680,
        "end_time": 1469119,
        "text": "jetzt einmal aus, das heißt ich schreibe hier styles, schreibe hier jetzt diese zwei geschweiften "
    },
    {
        "start_time": 1469119,
        "end_time": 1474400,
        "text": "Klammern auf, zwei geschweiften Klammern zu, das Semicolon kommt weg und außerdem müssen wir hier "
    },
    {
        "start_time": 1474400,
        "end_time": 1478799,
        "text": "noch das Ganze in so einzelnen Anführungszeichen schreiben. Nachdem ich das Ganze hier jetzt "
    },
    {
        "start_time": 1478799,
        "end_time": 1483799,
        "text": "angepasst habe, wird hier auf jeden Fall schon mal kein Fehler angezeigt, noch eine Warning, "
    },
    {
        "start_time": 1483799,
        "end_time": 1488599,
        "text": "dass wir unsere Navbar nicht mehr verwenden, das können wir noch fixen und wenn ich jetzt auf unsere "
    },
    {
        "start_time": 1488599,
        "end_time": 1494440,
        "text": "Seite gehe, dann sehen wir, dass hier oben jetzt unsere Karte angezeigt wird. Das Bild wird offensichtlich "
    },
    {
        "start_time": 1494440,
        "end_time": 1498599,
        "text": "noch nicht gefunden, aber sonst sehen wir hier schon mal alles. Unser Bild wird nicht angezeigt, "
    },
    {
        "start_time": 1498599,
        "end_time": 1503320,
        "text": "weil wir hier noch einen kleinen Fehler gemacht haben und zwar haben wir diesen Assetsordner eine "
    },
    {
        "start_time": 1503320,
        "end_time": 1508320,
        "text": "Ebene zu hoch angeordnet. Dieser Assetsordner sollte immer in diesem Public Ordner sein, "
    },
    {
        "start_time": 1508320,
        "end_time": 1513160,
        "text": "denn das ist ja worauf unser Webserver am Ende des Tages zugreift. Das heißt, ich wähle den "
    },
    {
        "start_time": 1513160,
        "end_time": 1519079,
        "text": "Assetsordner aus, drücke Steuerung X und anschließend füge ich den hier, nachdem ich auf Public gedrückt "
    },
    {
        "start_time": 1519079,
        "end_time": 1524320,
        "text": "habe, mit Steuerung V ein. Hat noch nicht ganz geklappt, dann ziehen wir den noch hinterher. So "
    },
    {
        "start_time": 1524440,
        "end_time": 1531880,
        "text": "und jetzt ist die Struktur richtig. Wir haben meinen Online-Shop Public Assets Image Tomatoes und hier "
    },
    {
        "start_time": 1531880,
        "end_time": 1535920,
        "text": "greifen wir jetzt drauf zu und wenn wir uns unsere Seite jetzt angucken, sehen wir hier, "
    },
    {
        "start_time": 1535920,
        "end_time": 1542039,
        "text": "dass unsere Karte diesen wunderschönen Header mit einem Bild hat. Die nächste Aufgabe wird jetzt "
    },
    {
        "start_time": 1542039,
        "end_time": 1547000,
        "text": "natürlich sein, mehrere Karten zu unserer App hinzuzufügen und die Navbar auch wieder einzufügen. "
    },
    {
        "start_time": 1547000,
        "end_time": 1555599,
        "text": "In diesem Abschnitt wollen wir jetzt mehrere Komponenten gleichzeitig in unsere App einfügen. "
    },
    {
        "start_time": 1555599,
        "end_time": 1560799,
        "text": "Wir haben ja bis jetzt die Navbar und eine Komponente für unser Produkt, für die Tomaten "
    },
    {
        "start_time": 1560799,
        "end_time": 1565240,
        "text": "aktuell. Von der zweiten Komponente wollen wir natürlich mehrere hinzufügen und die erste "
    },
    {
        "start_time": 1565240,
        "end_time": 1569119,
        "text": "wollen wir auch noch einfügen. Und dafür brauchen wir erst einmal eine Komponente, "
    },
    {
        "start_time": 1569119,
        "end_time": 1574160,
        "text": "die alles zusammenfasst. Wir haben ja gesagt, dass wir auf der untersten Ebene immer eine "
    },
    {
        "start_time": 1574160,
        "end_time": 1579160,
        "text": "Komponente namens App haben wollen und die bindet dann alles ein, was wir benötigen, "
    },
    {
        "start_time": 1579160,
        "end_time": 1583960,
        "text": "wie zum Beispiel unsere Navbar und so weiter und so fort. Das heißt, ich lege jetzt hier erst "
    },
    {
        "start_time": 1583960,
        "end_time": 1592079,
        "text": "mal eine neue Komponente an, nenne die App.jsx und drücke auf Enter. Hier kann ich jetzt wieder sagen, "
    },
    {
        "start_time": 1592079,
        "end_time": 1597360,
        "text": "sowas wie ihr EMRC, um dieses Importstatement zu machen und ich lege eine neue Komponente an, "
    },
    {
        "start_time": 1597559,
        "end_time": 1604160,
        "text": "nenne die App und hier möchte ich jetzt verschiedene Sachen exportieren und importieren. "
    },
    {
        "start_time": 1604160,
        "end_time": 1609559,
        "text": "Das heißt, dieses Produkt, das kommt hier erst mal raus und ich möchte jetzt hier einfach meine "
    },
    {
        "start_time": 1609559,
        "end_time": 1617160,
        "text": "App drin haben. Das heißt, ich sage hier App, zack, das wird auch automatisch importiert. Navbar und "
    },
    {
        "start_time": 1617160,
        "end_time": 1622680,
        "text": "Produkt importiere ich mir jetzt in der App selber, nicht mehr hier. Das heißt, ich gehe hier rüber "
    },
    {
        "start_time": 1623000,
        "end_time": 1630960,
        "text": "und hier in der App möchte ich jetzt sowohl meine Navbar haben als auch meine Komponente mit meinem "
    },
    {
        "start_time": 1630960,
        "end_time": 1636720,
        "text": "Produkt. Wenn ich das Ganze so schreibe, dann wird das Ganze allerdings nicht funktionieren und das "
    },
    {
        "start_time": 1636720,
        "end_time": 1643400,
        "text": "sehen wir auch hier. Hier steht, dass in JSX-Expressions immer maximal ein Parent-Element "
    },
    {
        "start_time": 1643400,
        "end_time": 1649039,
        "text": "sein darf. Was bedeutet das? Wir dürfen hier nur ein Element haben. Wir dürfen zwar ein Element "
    },
    {
        "start_time": 1649039,
        "end_time": 1654279,
        "text": "haben, wo mehrere Unterelemente drin sind, so wie wir das hier gemacht haben. Wir haben hier zum "
    },
    {
        "start_time": 1654279,
        "end_time": 1660920,
        "text": "Beispiel ein DIV und da sind mehrere Unterelemente drin. Das sehen wir hier so ganz deutlich. "
    },
    {
        "start_time": 1660920,
        "end_time": 1666320,
        "text": "Allerdings ist das Ganze nicht möglich, dass wir einfach so mehrere Elemente hier haben sollen. "
    },
    {
        "start_time": 1666320,
        "end_time": 1669840,
        "text": "Genau deswegen können wir jetzt verschiedene Sachen machen. Wir können hier beispielsweise "
    },
    {
        "start_time": 1669840,
        "end_time": 1678400,
        "text": "ein DIV einfügen und dann in diesem DIV mehrere Unterelemente haben, so in etwa. Das wäre möglich. "
    },
    {
        "start_time": 1678400,
        "end_time": 1683039,
        "text": "Wenn du jetzt sagst, ich will aber keinen extra DIV haben, dann kannst du auch hier schreiben "
    },
    {
        "start_time": 1683039,
        "end_time": 1691079,
        "text": "react.fragment und nachdem du das Ganze gemacht hast, dann hast du hier einfach das Ganze so "
    },
    {
        "start_time": 1691079,
        "end_time": 1695880,
        "text": "geschrieben und das funktioniert dann auch. Wenn wir uns unsere App jetzt angucken, ich mache das "
    },
    {
        "start_time": 1695880,
        "end_time": 1699440,
        "text": "mal hier wieder ein bisschen kleiner, dann sehen wir, dass hier oben erst die Navbar ist und hier "
    },
    {
        "start_time": 1699440,
        "end_time": 1705440,
        "text": "unten unser Carteitel. Wir können jetzt hier auch mehrere Produkte hinzufügen. Wenn wir das jetzt "
    },
    {
        "start_time": 1705440,
        "end_time": 1712079,
        "text": "hier haben, dann sehen wir, dass hier mehrere Produkte untereinander sind. Diese ganzen Produkte "
    },
    {
        "start_time": 1712079,
        "end_time": 1716440,
        "text": "würde ich jetzt noch mal in einen extra Container stecken, denn dann können wir sagen, dass diese "
    },
    {
        "start_time": 1716440,
        "end_time": 1721880,
        "text": "Produkte auch beispielsweise nebeneinander angezeigt werden sollen. Das heißt, ich kann jetzt hier "
    },
    {
        "start_time": 1721880,
        "end_time": 1727079,
        "text": "einfach sagen, wir haben einen DIV-Container, der geht hier auf. Da ist ein Produkt drin, ein Produkt "
    },
    {
        "start_time": 1727079,
        "end_time": 1734000,
        "text": "drin, ein Produkt drin, ein Produkt drin und das Ganze geht hier wieder zu. Wenn wir jetzt sagen "
    },
    {
        "start_time": 1734000,
        "end_time": 1738679,
        "text": "wollen, dass diese Produkte hier nebeneinander sein sollen, dann benötigen wir noch eine CSS-Klasse. "
    },
    {
        "start_time": 1738679,
        "end_time": 1745480,
        "text": "Das heißt, ich füge hier einfach mal eine CSS-Klasse hinzu, nenne die product-container "
    },
    {
        "start_time": 1745480,
        "end_time": 1750759,
        "text": "oder sowas und die lege ich an. Das heißt, ich brauche eine CSS-Datei, die nenne ich jetzt "
    },
    {
        "start_time": 1750759,
        "end_time": 1757720,
        "text": "einfach mal index.css. Zack, die kommt hier rein und anschließend kann ich jetzt sagen, dass hier "
    },
    {
        "start_time": 1757720,
        "end_time": 1763320,
        "text": "beispielsweise die Eigenschaft display flex gegeben wird, damit werden all meine Elemente in einer "
    },
    {
        "start_time": 1763320,
        "end_time": 1770079,
        "text": "Reihe angezeigt und dass meine Elemente einen Abstand haben sollen, zum Beispiel von 32 Pixel. "
    },
    {
        "start_time": 1770079,
        "end_time": 1776039,
        "text": "Diese index.css muss ich jetzt noch importieren, das mache ich einfach hier. Ich sage import.slash "
    },
    {
        "start_time": 1776039,
        "end_time": 1785400,
        "text": "index.css und dann füge ich hier ein Semikolon hinzu. Und wenn ich jetzt unsere App hier angucke, "
    },
    {
        "start_time": 1785400,
        "end_time": 1790079,
        "text": "sehe ich, dass hier vier verschiedene Container sind und dass diese Container auch einen Abstand "
    },
    {
        "start_time": 1790320,
        "end_time": 1796840,
        "text": "von 32 Pixel haben. Wenn das Ganze bei dir übrigens noch nicht so angezeigt werden sollte, "
    },
    {
        "start_time": 1796840,
        "end_time": 1803599,
        "text": "dann überprüfe immer zwei Sachen. Nummer eins die Konsolen. ob es hier irgendwelche Fehler gibt. Hier haben wir noch ein Fehler, aber das ist nicht "
    },
    {
        "start_time": 1803599,
        "end_time": 1807880,
        "text": "schlimm, weil das ist nur eine Warnung. Da können wir später noch drauf eingehen. Und das andere "
    },
    {
        "start_time": 1807880,
        "end_time": 1813079,
        "text": "ist, dass wir hier unbedingt gespeichert haben müssen. Das heißt, jede Datei, die du geändert "
    },
    {
        "start_time": 1813079,
        "end_time": 1816839,
        "text": "hast, geht da noch mal rein und drück einfach mal Steuerung S. Du siehst auch, dass hier unten "
    },
    {
        "start_time": 1816839,
        "end_time": 1822359,
        "text": "sich dann immer alles aktualisiert und du solltest auf jeden Fall immer jede Datei gespeichert haben. "
    },
    {
        "start_time": 1822359,
        "end_time": 1826720,
        "text": "Hier unten werden übrigens auch immer spannende Warnungen angezeigt. Beispielsweise wird hier "
    },
    {
        "start_time": 1826720,
        "end_time": 1832240,
        "text": "gesagt, dass in unserer Product-Datei noch ein kleiner Fehler ist und zwar in Line 11. Das steht "
    },
    {
        "start_time": 1832240,
        "end_time": 1836079,
        "text": "hier auch. Und wenn wir da reingucken, dann sehen wir auch, was das Problem ist. Hier ist auch so ein "
    },
    {
        "start_time": 1836079,
        "end_time": 1840680,
        "text": "komischer Hashtag. Das merkt er nicht. Wenn ich hier einfach ein Slash oder so was reinpacke, "
    },
    {
        "start_time": 1840680,
        "end_time": 1845400,
        "text": "dann funktioniert das Ganze. Zu guter Letzt wollen wir hier nach links und rechts natürlich auch "
    },
    {
        "start_time": 1845400,
        "end_time": 1851400,
        "text": "32 Pixel Abstand haben. Das heißt, ich gehe noch mal in unsere CSS-Datei und sage hier Padding "
    },
    {
        "start_time": 1851400,
        "end_time": 1859160,
        "text": "Left 32 Pixel und Padding Right 32 Pixel. Das eine ist, dass das Ganze nach links eingerückt wird und "
    },
    {
        "start_time": 1859160,
        "end_time": 1863400,
        "text": "damit wird es auf der rechten Seite eingerückt. Und jetzt sieht das Ganze so aus und ich finde, "
    },
    {
        "start_time": 1863400,
        "end_time": 1867599,
        "text": "das sieht bei den meisten Auflösungen jetzt schon mal ganz gut aus. Auf dem Handy sollten wir da "
    },
    {
        "start_time": 1867599,
        "end_time": 1872359,
        "text": "noch mal sowas sagen, wie das es untereinander angeordnet wird. Das kann man auch ganz easy sagen. "
    },
    {
        "start_time": 1872359,
        "end_time": 1880440,
        "text": "Dafür sagen wir einfach Add Media, packen hier rein. Maximale Breite sollte sein 850 Pixel zum "
    },
    {
        "start_time": 1880440,
        "end_time": 1885839,
        "text": "Beispiel und dann sollte unser Product Container noch eine extra Eigenschaft haben und zwar Flex "
    },
    {
        "start_time": 1885839,
        "end_time": 1890839,
        "text": "Direction Column. Damit werden Elemente untereinander angezeigt. Das sehen wir jetzt hier. Das heißt, "
    },
    {
        "start_time": 1890839,
        "end_time": 1899519,
        "text": "nebeneinander und ab einer gewissen Breite untereinander. Jetzt haben wir natürlich mit "
    },
    {
        "start_time": 1899519,
        "end_time": 1904920,
        "text": "unserem Online Shop noch ein Problem. Bis jetzt kann man einfach nur Tomaten kaufen. Wir müssen "
    },
    {
        "start_time": 1904920,
        "end_time": 1909039,
        "text": "dafür sorgen, dass hier immer bei jeder Komponente ein anderes Bild angezeigt wird, "
    },
    {
        "start_time": 1909039,
        "end_time": 1914160,
        "text": "dass hier ein anderer Titel angezeigt wird und ein anderer Text. Und das Ganze ist natürlich mit "
    },
    {
        "start_time": 1914160,
        "end_time": 1919559,
        "text": "diesen React Komponenten auch möglich. Dafür können wir einfach mal in unseren Code springen "
    },
    {
        "start_time": 1919559,
        "end_time": 1924880,
        "text": "und können hier jetzt eine Sache ändern. Und zwar haben wir in unserer App Component bis jetzt gesagt, "
    },
    {
        "start_time": 1924880,
        "end_time": 1928839,
        "text": "dass wir hier vier verschiedene Produkte einbinden. Aber hier steht einfach nur, "
    },
    {
        "start_time": 1928839,
        "end_time": 1934400,
        "text": "dass es ein Product sein soll. Wir haben jetzt die Möglichkeit, in diese Komponente Variablen "
    },
    {
        "start_time": 1934400,
        "end_time": 1938480,
        "text": "reinzugeben. Das heißt, wir können jetzt beispielsweise den Titel ändern, in dem ich "
    },
    {
        "start_time": 1938480,
        "end_time": 1944839,
        "text": "hier sage, Titel ist gleich Tomaten und beim nächsten, also beim nächsten Produkt hier unten "
    },
    {
        "start_time": 1944839,
        "end_time": 1950640,
        "text": "steht jetzt, Titel ist gleich Gurken. Genauso kann ich weitermachen. Ich kann auch hier und auch hier "
    },
    {
        "start_time": 1950640,
        "end_time": 1957400,
        "text": "irgendetwas hinschreiben und kann hier beispielsweise sagen, okay, es gibt hier, sagen wir mal, Äpfel und "
    },
    {
        "start_time": 1957400,
        "end_time": 1964079,
        "text": "hier gibt es Birnen zu kaufen. So, und diese Variablen, die kann ich jetzt in meiner Product "
    },
    {
        "start_time": 1964079,
        "end_time": 1970000,
        "text": "Komponente nehmen und da, wo Card Title steht, einfach einfügen. Und das mache ich, indem ich "
    },
    {
        "start_time": 1970000,
        "end_time": 1974079,
        "text": "hier jetzt einfach eine geschweifte Klammer auf, geschweifte Klammer zuschreibe und dann sage, "
    },
    {
        "start_time": 1974079,
        "end_time": 1982039,
        "text": "this.probs.title. Also das hier ist unsere Variable und das hier, das musst du immer davor "
    },
    {
        "start_time": 1982039,
        "end_time": 1986599,
        "text": "schreiben, denn das hier sagt, dass wir auf die Eigenschaften, die wir von außen reingegeben haben, "
    },
    {
        "start_time": 1986599,
        "end_time": 1992079,
        "text": "zugreifen wollen. Und wenn wir uns das jetzt anschauen, dann sehen wir hier Tomaten, Gurken, "
    },
    {
        "start_time": 1992079,
        "end_time": 1998880,
        "text": "Äpfel und Birnen. Jetzt haben wir natürlich nur eine Variable geändert. Im nächsten Schritt müssen "
    },
    {
        "start_time": 1998880,
        "end_time": 2003279,
        "text": "wir jetzt auch noch die Beschreibung ändern und natürlich auch noch das Bild von den Tomaten. Und "
    },
    {
        "start_time": 2003279,
        "end_time": 2007559,
        "text": "dafür müssen wir natürlich erstmal weitere Bilder herunterladen. Das heißt, wir gehen hier einfach "
    },
    {
        "start_time": 2007559,
        "end_time": 2011960,
        "text": "auf pixabay.com und suchen jetzt beispielsweise nach Gurken. Das kannst du auf Deutsch oder auf "
    },
    {
        "start_time": 2011960,
        "end_time": 2017360,
        "text": "Englisch eingeben, ist vollkommen egal. Und dann lade ich das Ganze herunter. Mit Äpfel und Birnen "
    },
    {
        "start_time": 2017360,
        "end_time": 2021799,
        "text": "habe ich das jetzt genauso gemacht und all diese Bilder packen wir jetzt in unseren Imageordner. "
    },
    {
        "start_time": 2021799,
        "end_time": 2026119,
        "text": "Ich empfehle dir das Ganze immer umzubenennen, denn dann kannst du es einfach deutlich leichter "
    },
    {
        "start_time": 2026119,
        "end_time": 2031400,
        "text": "einbinden. Apples kommt hier auch noch rein und jetzt sage ich einfach rechtsklick, rename und "
    },
    {
        "start_time": 2031400,
        "end_time": 2041599,
        "text": "schreibe hier apples.jpg, cucumbers.jpg und so weiter und so fort. Und jetzt bist du dran. Halt "
    },
    {
        "start_time": 2041599,
        "end_time": 2045960,
        "text": "dieses Video einmal kurz an und versuch diese kleine Übung alleine. Das heißt gebe hier jetzt "
    },
    {
        "start_time": 2045960,
        "end_time": 2051199,
        "text": "mehrere Variablen hintereinander rein, nicht nur den Titel, sondern eine Variable namens Image, "
    },
    {
        "start_time": 2051199,
        "end_time": 2057559,
        "text": "eine Variable namens Description und dann kannst du diese ganzen Variablen in der anderen Ansicht "
    },
    {
        "start_time": 2057559,
        "end_time": 2063119,
        "text": "übernehmen und anzeigen lassen. Wir machen das Ganze dann gleich nochmal gemeinsam. Bist du fertig? "
    },
    {
        "start_time": 2063119,
        "end_time": 2067719,
        "text": "Wenn nein, dann machen wir das Ganze jetzt gemeinsam. Wir brauchen also zwei Variablen, "
    },
    {
        "start_time": 2067719,
        "end_time": 2071760,
        "text": "die wir hier reingeben wollen. Einmal eine Variable, die nenne ich jetzt einfach mal Image, "
    },
    {
        "start_time": 2071760,
        "end_time": 2076159,
        "text": "ist ja egal wie wir die nennen. Und dann noch eine Variable, die füge ich hinter Titel ein, "
    },
    {
        "start_time": 2076159,
        "end_time": 2082079,
        "text": "weil es einfach von der Reihenfolge Sinn macht und zwar Description. Und beide Variablen müssen "
    },
    {
        "start_time": 2082079,
        "end_time": 2089760,
        "text": "jetzt natürlich irgendetwas bekommen. Bei dem Bild ist es klar, bei Tomaten kommt tomatoes.jpg "
    },
    {
        "start_time": 2089760,
        "end_time": 2096679,
        "text": "rein, bei Gurken kommt cucumbers.jpg rein und so weiter und so fort. Bei der Beschreibung kannst "
    },
    {
        "start_time": 2096679,
        "end_time": 2105599,
        "text": "du hinzufügen, was du willst, zum Beispiel füge Tomaten zu deinem Warenkorb hinzu. Da ich unkreativ "
    },
    {
        "start_time": 2105599,
        "end_time": 2108880,
        "text": "bin, schreibe ich jetzt das hier einfach so hin. Du solltest natürlich später dann eigene, "
    },
    {
        "start_time": 2108880,
        "end_time": 2113480,
        "text": "bessere Beschreibungen hier noch hinzufügen zu den jeweiligen Produkten. Ich schreibe hier "
    },
    {
        "start_time": 2113480,
        "end_time": 2118360,
        "text": "jetzt einfach mal Äpfel und hier schreibe ich Birnen. Und nachdem ich das Ganze gemacht habe, "
    },
    {
        "start_time": 2118360,
        "end_time": 2123440,
        "text": "müssen wir im Product das Ganze natürlich mit dieser Logik hier noch anzeigen lassen. Das heißt, "
    },
    {
        "start_time": 2123440,
        "end_time": 2129800,
        "text": "das Bild hier muss ebenfalls eine Variable sein. Wir haben diese Variable Image genannt und dann "
    },
    {
        "start_time": 2129800,
        "end_time": 2134719,
        "text": "muss auch diese Beschreibung hier eine Variable sein. Die Beschreibung haben wir einfach Description "
    },
    {
        "start_time": 2134720,
        "end_time": 2140400,
        "text": "genannt. Das heißt, das hier kommt alles weg und anschließend kommt hier Description rein. Wenn wir "
    },
    {
        "start_time": 2140400,
        "end_time": 2144559,
        "text": "das Ganze jetzt so gemacht haben, dann würdest du denken, es geht, aber wir haben noch einen kleinen "
    },
    {
        "start_time": 2144559,
        "end_time": 2148360,
        "text": "Fehler und vielleicht hast du das auch schon bemerkt. Die Bilder werden nicht mehr angezeigt und in "
    },
    {
        "start_time": 2148360,
        "end_time": 2153720,
        "text": "unserem Quellcode steht das Ganze hier so drin. Das müssen wir natürlich noch ändern. Und das "
    },
    {
        "start_time": 2153720,
        "end_time": 2160679,
        "text": "ist ein bisschen nervig und zwar ist das hier eine Variable. Eine Variable muss immer so in React "
    },
    {
        "start_time": 2160679,
        "end_time": 2165159,
        "text": "eingefügt werden ohne diese Anführungszeichen. Die Anführungszeichen, die kommen jetzt einfach "
    },
    {
        "start_time": 2165159,
        "end_time": 2170920,
        "text": "hier rein. Hier packen wir so einen Plus rein und verbinden letztendlich hier diesen Text mit dieser "
    },
    {
        "start_time": 2170920,
        "end_time": 2175199,
        "text": "Variable. Wenn wir uns das jetzt anschauen, dann sehen wir auch, dass es funktioniert hat. Hier "
    },
    {
        "start_time": 2175199,
        "end_time": 2179639,
        "text": "werden unsere Bilder richtig angezeigt. Das heißt, wir haben jetzt schon mal einen kleinen Online-Shop, "
    },
    {
        "start_time": 2179639,
        "end_time": 2185840,
        "text": "wo jetzt vier individuelle Produkte drin sind. Statt Go Somewhere sollte hier es noch stehen zum "
    },
    {
        "start_time": 2185920,
        "end_time": 2191079,
        "text": "Warenkorb hinzufügen oder sowas. Ich schreibe hier einfach mal hinzufügen und dann sieht das "
    },
    {
        "start_time": 2191079,
        "end_time": 2198800,
        "text": "Ganze doch schon mal richtig schick aus. Was unser Online-Shop natürlich noch benötigt, "
    },
    {
        "start_time": 2198800,
        "end_time": 2203000,
        "text": "ist ein Warenkorb. Das heißt, wenn wir auf hinzufügen drücken bei einem Produkt, "
    },
    {
        "start_time": 2203000,
        "end_time": 2207880,
        "text": "dann sollte das Ganze natürlich auch auf der rechten Seite oder so in unserem Warenkorb angezeigt "
    },
    {
        "start_time": 2207880,
        "end_time": 2212360,
        "text": "werden. Und das Ganze bauen wir jetzt. Als erstes müssen wir, du hast es dir wahrscheinlich schon "
    },
    {
        "start_time": 2212440,
        "end_time": 2222079,
        "text": "gedacht, eine neue Komponente anlegen. Die nenne ich jetzt einfach mal shopping-card.jsx und drücke "
    },
    {
        "start_time": 2222079,
        "end_time": 2229199,
        "text": "auf Enter. Wir importieren wieder zwei verschiedene Dinge. Einmal natürlich React und Component und "
    },
    {
        "start_time": 2229199,
        "end_time": 2234039,
        "text": "dann müssen wir die Komponente selber erstellen. Die nehmen wir jetzt dieses Mal in sogenannten "
    },
    {
        "start_time": 2234039,
        "end_time": 2239519,
        "text": "CamelCase, also so geschrieben, shopping-card. Dann müssen wir jetzt natürlich im nächsten "
    },
    {
        "start_time": 2239519,
        "end_time": 2243480,
        "text": "Schritt hier noch sagen, wie das Ganze aussehen soll. Und da bauen wir jetzt erst mal nur ein "
    },
    {
        "start_time": 2243480,
        "end_time": 2249360,
        "text": "DIV. Da steht jetzt irgendwie noch eine kleine Überschrift und zwar shopping-card. Oder machen "
    },
    {
        "start_time": 2249360,
        "end_time": 2255760,
        "text": "wir auf Deutsch Warenkorb. Und viel mehr ist jetzt hier erst mal nicht zu sehen. Diesen Warenkorb "
    },
    {
        "start_time": 2255760,
        "end_time": 2260639,
        "text": "müssen wir jetzt in unserer App einbinden. Und wichtig ist, das Ganze soll natürlich rechts von "
    },
    {
        "start_time": 2260639,
        "end_time": 2265039,
        "text": "unserem Produktcontainer eingebunden werden. Dementsprechend füge ich das jetzt hier erst "
    },
    {
        "start_time": 2265039,
        "end_time": 2270000,
        "text": "mal so hinzu. Zack, das wird automatisch immer hier importiert. Hier mache ich noch so ein Slash, "
    },
    {
        "start_time": 2270000,
        "end_time": 2274239,
        "text": "damit wir das einfach hier so reinpacken können. Und nachdem wir das Ganze jetzt gemacht haben, "
    },
    {
        "start_time": 2274239,
        "end_time": 2278639,
        "text": "müssen wir irgendwie noch sagen, dass die Naftbar oben hinkommt und diese beiden Dinger hier "
    },
    {
        "start_time": 2278639,
        "end_time": 2284280,
        "text": "nebeneinander. Und dafür packe ich die beiden unteren Elemente noch mal in einen neuen Container. "
    },
    {
        "start_time": 2284280,
        "end_time": 2290400,
        "text": "Denn einem Container kann ich ja immer sagen, dass Elemente nebeneinander angeordnet werden. "
    },
    {
        "start_time": 2290400,
        "end_time": 2296320,
        "text": "Dafür weise ich dem Ding hier einfach eine neue Klasse zu und nenne diese Klasse jetzt einfach mal "
    },
    {
        "start_time": 2296320,
        "end_time": 2301239,
        "text": "Main-Container. Die können wir wie gesagt nennen, wie wir wollen. Wichtig ist nur, "
    },
    {
        "start_time": 2301239,
        "end_time": 2306199,
        "text": "dass wir sie mit einem Punkt hier so in der CSS-Datei hinzufügen und dass wir hier jetzt "
    },
    {
        "start_time": 2306199,
        "end_time": 2311920,
        "text": "einfach sagen, display flex. Denn mit dem Befehl können wir beide Elemente in eine "
    },
    {
        "start_time": 2311920,
        "end_time": 2316239,
        "text": "Reihe nebeneinander platzieren. Jetzt sagen wir noch, dass die einen Abstand haben sollen. Und zwar "
    },
    {
        "start_time": 2316239,
        "end_time": 2322119,
        "text": "32 Pixel. Und wenn wir uns das Ganze jetzt angucken, dann sieht es so aus. Noch nicht ganz perfekt. "
    },
    {
        "start_time": 2322119,
        "end_time": 2327000,
        "text": "Ja, ich würde noch mal ein bisschen Abstand nach rechts geben. Also sagen wir noch mal so etwas wie "
    },
    {
        "start_time": 2327000,
        "end_time": 2334840,
        "text": "padding minus right 32 Pixel. Und eigentlich brauchen wir diese Gap jetzt sogar gar nicht "
    },
    {
        "start_time": 2334840,
        "end_time": 2339079,
        "text": "mehr. Denn wir wissen ja, dass unser Product-Container ebenfalls nach rechts hier eine "
    },
    {
        "start_time": 2339079,
        "end_time": 2344199,
        "text": "Einrückung von 32 Pixel hat. Das heißt, wenn wir uns das Ganze jetzt angucken, haben wir hier nach "
    },
    {
        "start_time": 2344199,
        "end_time": 2350559,
        "text": "rechts 32 Pixel, nach links zu diesem Warenkorb 32 Pixel und überall genau 32 Pixel Abstand. "
    },
    {
        "start_time": 2350559,
        "end_time": 2355199,
        "text": "Nachdem wir das Ganze gemacht haben, möchte ich unserem Warenkorb noch eine Mindestbreite geben, "
    },
    {
        "start_time": 2355199,
        "end_time": 2360280,
        "text": "zum Beispiel mindestens 20 Prozent oder so. Bedeutet, unser Shopping-Card bekommt hier "
    },
    {
        "start_time": 2360280,
        "end_time": 2365440,
        "text": "ebenfalls eine Klasse zugewiesen. Ich nenne das einfach mal Shopping minus Card. Macht, "
    },
    {
        "start_time": 2365440,
        "end_time": 2371559,
        "text": "glaube ich, am meisten Sinn. Und sage hier, dass unser Shopping-Card mit einem Punkt eine "
    },
    {
        "start_time": 2371559,
        "end_time": 2379559,
        "text": "Breite bekommt von 20 oder sagen wir irgendwie 25. Ich glaube 20 ist gut. VW. Ein VW entspricht "
    },
    {
        "start_time": 2379559,
        "end_time": 2384440,
        "text": "ja immer einem Prozent von unserer Bildschirmbreite. Dementsprechend sieht das Ganze jetzt so aus. "
    },
    {
        "start_time": 2384440,
        "end_time": 2391199,
        "text": "Wir könnten es auch noch erhöhen. Könnten hier zum Beispiel sagen with 25 VW, dann wäre es so. "
    },
    {
        "start_time": 2391199,
        "end_time": 2396119,
        "text": "Gerade wenn wir das Ganze hier sehr klein machen, dann sehen wir es. Auf dem Handy müsste man sich "
    },
    {
        "start_time": 2396119,
        "end_time": 2399920,
        "text": "jetzt eigentlich noch mal etwas anderes überlegen, aber erstmal lassen. "
    },
    {
        "start_time": 2400000,
        "end_time": 2405920,
        "text": "das Ganze jetzt so und jetzt müssen wir dafür sorgen, dass Elemente mit einem Klick auf diesen "
    },
    {
        "start_time": 2405920,
        "end_time": 2414480,
        "text": "Button unserem Warenkorb hinzugefügt werden können. In diesem Abschnitt wollen wir unseren "
    },
    {
        "start_time": 2414480,
        "end_time": 2418880,
        "text": "Warenkorb rendern. Bedeutet, wir brauchen irgendwie eine Möglichkeit, alle Waren, "
    },
    {
        "start_time": 2418880,
        "end_time": 2423360,
        "text": "die wir zu unserem Warenkorb später mal hinzufügen, abzuspeichern und dann all diese "
    },
    {
        "start_time": 2423360,
        "end_time": 2428519,
        "text": "Elemente nebeneinander oder untereinander anzuzeigen. Für so etwas eignet sich natürlich "
    },
    {
        "start_time": 2428920,
        "end_time": 2434599,
        "text": "ein sogenanntes Array. Ein Array bietet uns die Möglichkeit, mehrere Informationen nebeneinander "
    },
    {
        "start_time": 2434599,
        "end_time": 2439039,
        "text": "abzuspeichern und das Ganze gucken wir uns jetzt einmal gemeinsam an. Wenn wir in unsere Shopping "
    },
    {
        "start_time": 2439039,
        "end_time": 2444360,
        "text": "Card Komponente gucken, dann sieht das Ganze aktuell so aus. Wir haben einen Container und "
    },
    {
        "start_time": 2444360,
        "end_time": 2448760,
        "text": "in diesem Container wird eine Überschrift gerendert. Hier sollten wir jetzt allerdings "
    },
    {
        "start_time": 2448760,
        "end_time": 2454639,
        "text": "noch weitere Diffs beispielsweise zeigen und diese Diffs, die sollten selbstverständlich sagen, "
    },
    {
        "start_time": 2454639,
        "end_time": 2460280,
        "text": "was für ein Produkt hinzugefügt wurde, zum Beispiel Tomaten und vielleicht noch wie viel, "
    },
    {
        "start_time": 2460280,
        "end_time": 2466159,
        "text": "also zum Beispiel zweimal Tomaten oder so was. Jetzt müssen wir natürlich wissen, was hier alles "
    },
    {
        "start_time": 2466159,
        "end_time": 2470760,
        "text": "hinzugefügt wurde und dafür gucken wir uns das erste Mal diesen State hier an. In dem State "
    },
    {
        "start_time": 2470760,
        "end_time": 2477079,
        "text": "speichern wir letztendlich immer alle Daten aus unserer Komponente. Bedeutet, wir können hier "
    },
    {
        "start_time": 2477079,
        "end_time": 2483679,
        "text": "beispielsweise so etwas sagen wie Items und können hier nun einfach hinzufügen, welche Items und wie "
    },
    {
        "start_time": 2483679,
        "end_time": 2489519,
        "text": "viele Items hier hinzugefügt wurden. Bedeutet, wir können hier jetzt beispielsweise sagen eine "
    },
    {
        "start_time": 2489519,
        "end_time": 2496840,
        "text": "Menge, eins, dann einen Namen, also Tomaten und dann vielleicht noch irgendwie einen Preis, "
    },
    {
        "start_time": 2496840,
        "end_time": 2503920,
        "text": "ja schreibe einfach mal Preis Doppelpunkt 4,9 oder so was. Und nachdem ich das Ganze gemacht habe, "
    },
    {
        "start_time": 2503920,
        "end_time": 2508360,
        "text": "kann ich jetzt diese Daten hier anzeigen. Jetzt angenommen, wir haben nicht nur Tomaten, "
    },
    {
        "start_time": 2508360,
        "end_time": 2513920,
        "text": "sondern auch noch ein weiteres Element, dann würden diese Dinge hier einfach so hintereinander "
    },
    {
        "start_time": 2513920,
        "end_time": 2518920,
        "text": "angezeigt werden. Hier haben wir alle Informationen zu unseren Tomaten im Warenkorb, hier haben wir "
    },
    {
        "start_time": 2518920,
        "end_time": 2524360,
        "text": "alle Informationen zu unseren Äpfeln, schreibe ich mal. Äpfel kosten vielleicht ein bisschen mehr, "
    },
    {
        "start_time": 2524360,
        "end_time": 2529679,
        "text": "ja, das sind hier Kilo-Preise oder so was, deswegen ist es etwas hoch, wahrscheinlich sind Tomaten "
    },
    {
        "start_time": 2529679,
        "end_time": 2535920,
        "text": "sogar noch etwas günstiger, sagen wir mal 2,9 und 4,9, dann passt glaube ich noch mal ein bisschen "
    },
    {
        "start_time": 2535920,
        "end_time": 2541639,
        "text": "besser. Äpfel sind eine Riesenkiste wahrscheinlich und nachdem wir das Ganze gemacht haben, können wir "
    },
    {
        "start_time": 2541639,
        "end_time": 2547760,
        "text": "jetzt die Elemente hier raus irgendwie hier unten darstellen. Wenn du dich mit Angular schon "
    },
    {
        "start_time": 2547760,
        "end_time": 2553360,
        "text": "mal auseinandergesetzt hast, dann wirst du wissen, in Angular gibt es etwas, das heißt NG4 und mit "
    },
    {
        "start_time": 2553360,
        "end_time": 2558239,
        "text": "diesem NG4 können wir sagen, dass wir das hier je nachdem wie viele Items wir hier oben haben, "
    },
    {
        "start_time": 2558239,
        "end_time": 2563960,
        "text": "wiederholen können. Das heißt, jetzt bei einem Item, zwei Items, würde diese Sektion hier zweimal "
    },
    {
        "start_time": 2563960,
        "end_time": 2570159,
        "text": "wiederholt werden. Das Ganze ist in React nicht möglich, stattdessen schreibt man das Ganze mit "
    },
    {
        "start_time": 2570159,
        "end_time": 2576440,
        "text": "dem sogenannten Mapping-Operator. Das heißt, wir greifen jetzt erstmal auf die Items zu, indem wir "
    },
    {
        "start_time": 2576440,
        "end_time": 2585840,
        "text": "sagen this.state.map und jetzt können wir in dieser Mapping-Funktion sagen, dass wir auf ein "
    },
    {
        "start_time": 2585840,
        "end_time": 2592639,
        "text": "jeweiliges Item zugreifen wollen, also auf ein Element hier raus und für jedes Item wollen wir "
    },
    {
        "start_time": 2592639,
        "end_time": 2597679,
        "text": "diesen Code hier generieren. Jetzt wollen wir noch sagen, dass hier nicht Tomaten steht, "
    },
    {
        "start_time": 2597679,
        "end_time": 2604760,
        "text": "sondern der Name von unserem jeweiligen Item, also item.name und jetzt würde hier einfach "
    },
    {
        "start_time": 2604760,
        "end_time": 2610000,
        "text": "item.name schreihen, deswegen müssen wir hier noch einmal eine geschweifte Klammer auf und eine "
    },
    {
        "start_time": 2610000,
        "end_time": 2615719,
        "text": "geschweifte Klammer zu machen. Wir setzen also hier wieder eine Variable ein. Das Gleiche müssen wir "
    },
    {
        "start_time": 2615719,
        "end_time": 2620159,
        "text": "jetzt auch für diese zwei X machen. Hier wollen wir ja auf Amount zugreifen und dementsprechend "
    },
    {
        "start_time": 2620159,
        "end_time": 2629800,
        "text": "sagen wir hier einfach item.amount und anschließend sollte das Ganze hier funktionieren. Wenn wir den "
    },
    {
        "start_time": 2629800,
        "end_time": 2635599,
        "text": "Preis jetzt auch noch haben wollen, dann fügen wir hier auch noch item.price hinzu und dahinter "
    },
    {
        "start_time": 2635599,
        "end_time": 2640880,
        "text": "vielleicht noch ein Eurozeichen oder so was. Einen Minifehler haben wir noch. Hier sagen wir "
    },
    {
        "start_time": 2640880,
        "end_time": 2648519,
        "text": "nicht this.state, sondern this.state.items.map, denn wir wollen ja von unserem State auf die Items "
    },
    {
        "start_time": 2648519,
        "end_time": 2654559,
        "text": "zugreifen und diese wollen wir dann hier zu solch einer DIV-Reihe rendern. Wenn wir uns das Ganze "
    },
    {
        "start_time": 2654559,
        "end_time": 2658599,
        "text": "jetzt an unserem Webbrowser angucken, einmal aktualisieren, dann sehen wir hier auch gleich, "
    },
    {
        "start_time": 2658599,
        "end_time": 2665639,
        "text": "okay, hier steht jetzt eine DIV, wir untersuchen das Ganze mal, zack und hier steht 1 X Tomaten "
    },
    {
        "start_time": 2665639,
        "end_time": 2673280,
        "text": "2,9 Euro und darunter steht jetzt auch noch so ein Ding, ein X Äpfel 94 Euro. Das Ganze scheint also "
    },
    {
        "start_time": 2673400,
        "end_time": 2678519,
        "text": "astrein zu funktionieren. Wir kriegen allerdings in unserer Konsole immer noch eine Warnung angezeigt "
    },
    {
        "start_time": 2678519,
        "end_time": 2686159,
        "text": "und zwar steht hier each child in a list should have a unique keyprop. Bedeutet, mit anderen Worten, "
    },
    {
        "start_time": 2686159,
        "end_time": 2692360,
        "text": "wir müssen bei react, damit react den DOM, also die Sammlung aller HTML-Elemente, die gerendert "
    },
    {
        "start_time": 2692360,
        "end_time": 2697279,
        "text": "werden, immer zuordnen kann, hier noch eine Keyproperty hinzufügen. Hier schreiben wir einfach "
    },
    {
        "start_time": 2697279,
        "end_time": 2706360,
        "text": "key=\"item.id\", das sollte immer etwas eindeutiges sein. Dann müssen wir natürlich den Dingern hier "
    },
    {
        "start_time": 2706360,
        "end_time": 2711360,
        "text": "noch eine ID hinzufügen, ja, wir können auch einfach so etwas sagen wie item.name, weil Tomaten, "
    },
    {
        "start_time": 2711360,
        "end_time": 2716079,
        "text": "Äpfel und so weiter, hier muss Äpfel stehen, auch nur einmal vorkommt, sollte das in diesem Fall "
    },
    {
        "start_time": 2716079,
        "end_time": 2720559,
        "text": "auch passen. Also das hier sollte immer etwas eindeutiges sein. Hier noch eine geschreifte "
    },
    {
        "start_time": 2720559,
        "end_time": 2726400,
        "text": "Klammer davor und hier ebenfalls, dann diese Anführungszeichen weg und nachdem wir das Ganze "
    },
    {
        "start_time": 2726400,
        "end_time": 2730880,
        "text": "gemacht haben und jetzt aktualisieren, sehen wir, dass die Fehlermeldung verschwunden ist. Die "
    },
    {
        "start_time": 2730880,
        "end_time": 2734719,
        "text": "andere Fehlermeldung, die können wir auch gleich fixen, dafür müssen wir einfach hier auf die "
    },
    {
        "start_time": 2734719,
        "end_time": 2742239,
        "text": "oberste Ebene gehen, in unsere index.js und hier sagen wir react-dom.render. Stattdessen müssen wir "
    },
    {
        "start_time": 2742239,
        "end_time": 2748320,
        "text": "aber das hier sagen, const root ist gleich react-dom.create-root-element, ja, das hat sich "
    },
    {
        "start_time": 2748320,
        "end_time": 2753519,
        "text": "einfach bei der letzten React-Version, ich glaube nach Version 18 geändert und jetzt müssen wir hier "
    },
    {
        "start_time": 2753519,
        "end_time": 2760800,
        "text": "sagen root.render und diesen Teil hier wegnehmen. react-dom hier noch kleinschreiben, so und jetzt "
    },
    {
        "start_time": 2760800,
        "end_time": 2765000,
        "text": "haben wir es und jetzt sehen wir, dass dieser Fehler auch weg ist. Jetzt haben wir noch eine "
    },
    {
        "start_time": 2765000,
        "end_time": 2769679,
        "text": "neue Fehlermeldung, aber das ist auch gar nicht so schlimm, denn wir benutzen ja React und das Gute "
    },
    {
        "start_time": 2769679,
        "end_time": 2773559,
        "text": "bei React ist, dass es sehr verbreitet ist. Das heißt, jede Fehlermeldung, die plötzlich neu "
    },
    {
        "start_time": 2773559,
        "end_time": 2777519,
        "text": "auftaucht, weil sich die Version geändert hat, findest du einfach mit einer Sekunde googeln, "
    },
    {
        "start_time": 2777519,
        "end_time": 2782119,
        "text": "ja, ich habe das hier einfach mal eingegeben, dann gehst du auf Stack Overflow, da findest du meistens "
    },
    {
        "start_time": 2782119,
        "end_time": 2787039,
        "text": "die beste Lösung und hier steht jetzt genau, was du zu tun hast. Wir müssen jetzt etwas anderes, "
    },
    {
        "start_time": 2787039,
        "end_time": 2793280,
        "text": "nicht mehr react-dom, sondern react-dom-client importieren und das hier einfügen und anschließend "
    },
    {
        "start_time": 2793280,
        "end_time": 2797599,
        "text": "ist diese Fehlermeldung jetzt ebenfalls verschwunden und wir haben keine Fehlermeldung "
    },
    {
        "start_time": 2797599,
        "end_time": 2806360,
        "text": "mehr und unser Warenkorb funktioniert einwandfrei. Wenn wir uns unsere Applikation angucken, dann "
    },
    {
        "start_time": 2806360,
        "end_time": 2813000,
        "text": "haben wir jetzt folgende Struktur. Wir haben eine App und diese App beinhaltet drei Unterelemente, "
    },
    {
        "start_time": 2813000,
        "end_time": 2819599,
        "text": "einmal eine NAVBA, einen DIV-Container und einen Shopping-Card. In unserem DIV-Container befinden "
    },
    {
        "start_time": 2819599,
        "end_time": 2823720,
        "text": "sich wiederum vier Produkte. In dieser Produktkomponente haben wir jetzt einen "
    },
    {
        "start_time": 2823720,
        "end_time": 2829199,
        "text": "Hinzufügen-Button und wenn wir auf diesen Button draufdrücken, dann müssen wir irgendwie die "
    },
    {
        "start_time": 2829199,
        "end_time": 2834960,
        "text": "Information, dass wir das jeweilige Produkt hinzufügen wollen, an die übergeordnete Komponente, "
    },
    {
        "start_time": 2834960,
        "end_time": 2840960,
        "text": "also an die App geben, also da hoch und das Ganze muss dann weitergegeben werden an unseren "
    },
    {
        "start_time": 2840960,
        "end_time": 2846400,
        "text": "Shopping-Card. Wenn wir unser Produkt angucken, ist das Ganze erstmal ganz klar. Hier ist unser "
    },
    {
        "start_time": 2846400,
        "end_time": 2851279,
        "text": "Hinzufügen-Link. Das Ganze sollte jetzt erstmal kein Link mehr sein, sondern ein Button, denn "
    },
    {
        "start_time": 2851279,
        "end_time": 2856559,
        "text": "ein Button kann man auslösen und dann kann man eine Funktion ausführen. Wenn wir jetzt auf diesen "
    },
    {
        "start_time": 2856559,
        "end_time": 2861279,
        "text": "Button drücken, sollen unserer übergeordneten Komponente, die das Ganze einbindet, also dieser "
    },
    {
        "start_time": 2861279,
        "end_time": 2868320,
        "text": "App.jsx, eine Funktion ausgelöst werden. Und das Ganze schreibt man so. Wir sagen onClick und "
    },
    {
        "start_time": 2868320,
        "end_time": 2873039,
        "text": "wichtig ist, dass das C hier im Gegensatz zu reinem JavaScript groß geschrieben wird, sonst funktioniert "
    },
    {
        "start_time": 2873039,
        "end_time": 2884320,
        "text": "das Ganze nicht und hier sagen wir jetzt this.props.onAdd. Und dieses onAdd hier, das ist jetzt eine "
    },
    {
        "start_time": 2884320,
        "end_time": 2891199,
        "text": "Eigenschaft, die der Komponente product-automatisch hinzugefügt wird. Mit diesen props greifen wir "
    },
    {
        "start_time": 2891199,
        "end_time": 2897679,
        "text": "immer auf diese ganzen Dinger hier zu, auf dieses Image, Title, Description. Und jetzt haben wir eine "
    },
    {
        "start_time": 2897679,
        "end_time": 2903679,
        "text": "neue Eigenschaft hinzugefügt und die heißt onAdd. Und hier können wir jetzt ganz simpel eine Funktion "
    },
    {
        "start_time": 2903679,
        "end_time": 2908960,
        "text": "aufrufen. Das heißt sowas wie addItem und hier müssen wir jetzt noch verschiedene Sachen reingeben, "
    },
    {
        "start_time": 2908960,
        "end_time": 2917000,
        "text": "nämlich natürlich die Anzahl vielleicht eins, dann was wir hinzufügen wollen, also Tomaten und "
    },
    {
        "start_time": 2917000,
        "end_time": 2925400,
        "text": "dann auch noch den Preis. Also was haben wir gesagt? Kostentomaten 2,99. Wichtig ist, das hier ist eine "
    },
    {
        "start_time": 2925400,
        "end_time": 2931519,
        "text": "Zahl, so. Und hier dürfen jetzt keine Anführungszeichen mehr rein, sondern in React müssen wir hier immer "
    },
    {
        "start_time": 2931519,
        "end_time": 2935679,
        "text": "diese geschweiften Dinger schreiben, denn die Anführungszeichen würden immer dafür stehen, "
    },
    {
        "start_time": 2935679,
        "end_time": 2941559,
        "text": "dass wir einen String, also einen Text haben und das Ganze soll hier oben nicht der Fall sein. Die "
    },
    {
        "start_time": 2941559,
        "end_time": 2946639,
        "text": "Funktion addItem müssen wir jetzt unserer App hier hinzufügen. Wir könnten das Ganze jetzt so machen, "
    },
    {
        "start_time": 2946760,
        "end_time": 2951360,
        "text": "indem wir hier einfach schreiben addItem und so weiter. In React benutzt man aber nahezu immer "
    },
    {
        "start_time": 2951360,
        "end_time": 2957279,
        "text": "die sogenannte arrowNotation. Das heißt wir schreiben das Ganze so. Das hat einen Vorteil und "
    },
    {
        "start_time": 2957279,
        "end_time": 2962880,
        "text": "zwar können wir ansonsten in React nicht auf dieses this ohne weiteres zugreifen und das braucht man "
    },
    {
        "start_time": 2962880,
        "end_time": 2967639,
        "text": "öfter mal, wenn man programmiert, beispielsweise wenn wir auf den State zugreifen wollen. Wir "
    },
    {
        "start_time": 2967639,
        "end_time": 2972559,
        "text": "wollen unserem State hier oben jetzt verschiedene Items hinzufügen. Das heißt standardmäßig sollte "
    },
    {
        "start_time": 2972559,
        "end_time": 2979119,
        "text": "das hier erstmal ein leeres Array sein. Und wenn wir jetzt sagen this.setState können wir "
    },
    {
        "start_time": 2979119,
        "end_time": 2984119,
        "text": "diesen State hier oben verändern. Ich kann jetzt hier sagen, welches Feld ich ändern möchte, "
    },
    {
        "start_time": 2984119,
        "end_time": 2990359,
        "text": "nämlich das Feld Items und zu was ich es ändern möchte. Und zwar zu den alten Items, also this.state.items "
    },
    {
        "start_time": 2990359,
        "end_time": 2999199,
        "text": "und jetzt möchte ich hier allerdings etwas hinzufügen. Ich sage Punkt push und kann jetzt hier "
    },
    {
        "start_time": 3000000,
        "end_time": 3003980,
        "text": "paar Elemente hinzufügen. Das heißt, ich möchte natürlich den Amount hinzufügen, "
    },
    {
        "start_time": 3003980,
        "end_time": 3014340,
        "text": "ich möchte gleichzeitig aber auch noch den Namen hinzufügen und ich möchte zusätzlich auch noch den Price hinzufügen. Diese Informationen, die geben "
    },
    {
        "start_time": 3014340,
        "end_time": 3018119,
        "text": "wir hier in diese Funktion alle rein. Das heißt, wir können hier zwischen den "
    },
    {
        "start_time": 3018119,
        "end_time": 3024400,
        "text": "Klammern darauf zugreifen. Amount, Name, Price. Diese drei Variablen kriegen "
    },
    {
        "start_time": 3024400,
        "end_time": 3030719,
        "text": "jetzt die Werte 1, Tomaten 2,99. Das Ganze müssen wir jetzt hier auch noch "
    },
    {
        "start_time": 3030719,
        "end_time": 3036280,
        "text": "reingeben. Das heißt Name, Doppelpunkt Name, Price, Doppelpunkt Price und so "
    },
    {
        "start_time": 3036280,
        "end_time": 3039559,
        "text": "weiter. Die Autovervollständigung hat hier unten noch ein kleinen Fehler gemacht, "
    },
    {
        "start_time": 3039559,
        "end_time": 3044840,
        "text": "eine geschweifte Klammer zu viel und ein Semikolon zu wenig. Hier oben muss noch "
    },
    {
        "start_time": 3044840,
        "end_time": 3048400,
        "text": "eine Klammer hinzugefügt werden. Hier hinter dem Doppelpunkt müssen wir jetzt sagen, "
    },
    {
        "start_time": 3048400,
        "end_time": 3052960,
        "text": "was wir hier reingeben. Das heißt, wir müssen uns hier erstmal den alten State "
    },
    {
        "start_time": 3053199,
        "end_time": 3056559,
        "text": "holen und müssen da etwas Neues hinzufügen. Das heißt, ich sage so was wie "
    },
    {
        "start_time": 3056559,
        "end_time": 3063679,
        "text": "CurrentItems und sage jetzt this.state.items, um auf die aktuellen Items hier "
    },
    {
        "start_time": 3063679,
        "end_time": 3067639,
        "text": "oben zuzugreifen. Hier kann ich jetzt etwas Neues reinpushen, indem ich sage "
    },
    {
        "start_time": 3067639,
        "end_time": 3074480,
        "text": "CurrentItems.push und hier füge ich ein neues JSON hinzu. In unser JSON kommen "
    },
    {
        "start_time": 3074480,
        "end_time": 3078360,
        "text": "jetzt die drei Parameter rein, die wir hier zwischen den Klammern in unsere "
    },
    {
        "start_time": 3078360,
        "end_time": 3083679,
        "text": "Funktion geben. Das heißt, wir nennen das Ganze mal Amount, Name und Price und "
    },
    {
        "start_time": 3083679,
        "end_time": 3087920,
        "text": "diese drei Dinger, die müssen jetzt hier reingepusht werden. Durch diese Syntax "
    },
    {
        "start_time": 3087920,
        "end_time": 3091480,
        "text": "wird jetzt ein JSON erstellt, was ein Feld Amount hat mit dem Wert, den wir "
    },
    {
        "start_time": 3091480,
        "end_time": 3095519,
        "text": "da reingeben, ein Name hat mit dem Wert, den wir hier reingeben und ein Price "
    },
    {
        "start_time": 3095519,
        "end_time": 3098840,
        "text": "hat mit dem Wert, den wir hier reingeben. Und wenn ich das Ganze jetzt noch ein "
    },
    {
        "start_time": 3098840,
        "end_time": 3102360,
        "text": "bisschen formatiere, zum Beispiel indem ich hier einfach ein Enter einfüge und so, "
    },
    {
        "start_time": 3102360,
        "end_time": 3106679,
        "text": "dann kann man das Ganze ganz gut lesen und diese CurrentItems, die pushe ich "
    },
    {
        "start_time": 3106679,
        "end_time": 3111599,
        "text": "jetzt hier rein. Das heißt, das Feld Items wird jetzt überschrieben mit dem Wert, "
    },
    {
        "start_time": 3111599,
        "end_time": 3118960,
        "text": "den ich hier neu reingebe. Jetzt haben wir noch ein kleines Problem, was leider sehr React spezifisch ist und zwar können wir hier keine Parameter "
    },
    {
        "start_time": 3118960,
        "end_time": 3127239,
        "text": "reingeben. Wir müssen die Funktion hier direkt ohne Klammer auf Klammer zu aufrufen, so wie jetzt. Was wir aber machen können, ist das Ganze so zu "
    },
    {
        "start_time": 3127239,
        "end_time": 3133440,
        "text": "schreiben und jetzt hier das Ganze reinzugeben. Hier unten kriegen wir jetzt noch einen kleinen Fehler, denn hier steht ja AddItem. "
    },
    {
        "start_time": 3133440,
        "end_time": 3141679,
        "text": "Das AddItem ist aber Teil von unserer Klasse, also müssen wir hier sagen this.addItem. Nachdem wir das Ganze geschafft haben, können wir das jetzt "
    },
    {
        "start_time": 3141679,
        "end_time": 3146400,
        "text": "auch unseren anderen Produkten hinzufügen, also hier, hier und hier und "
    },
    {
        "start_time": 3146400,
        "end_time": 3158760,
        "text": "sagen hier natürlich Gurken, Äpfel, Birnen und können hier noch die Preise ein bisschen ändern. Sagen wir 1,99, 3,99, 4,99. "
    },
    {
        "start_time": 3158760,
        "end_time": 3165679,
        "text": "Dieses HeadState hier ist übrigens extrem wichtig, denn hier werden nicht nur einfach Daten hier oben geupdatet, sondern gleichzeitig wird auch diese "
    },
    {
        "start_time": 3165679,
        "end_time": 3174639,
        "text": "Renderfunktion nur durch dieses SetState automatisch neu ausgeführt. Bei Angular funktioniert das beispielsweise automatisch. React hingegen braucht "
    },
    {
        "start_time": 3174639,
        "end_time": 3179480,
        "text": "immer diese Funktion, um zu sagen, dass wir unseren Content neu rendern wollen. "
    },
    {
        "start_time": 3179480,
        "end_time": 3183159,
        "text": "Jetzt wollen wir uns natürlich noch angucken, ob unsere Daten auch wirklich "
    },
    {
        "start_time": 3183159,
        "end_time": 3186679,
        "text": "verändert wurden und deswegen logge ich das Ganze jetzt einfach mal und sage "
    },
    {
        "start_time": 3186679,
        "end_time": 3191720,
        "text": "this.state, um zu gucken, was mit unserem State passiert. Das heißt, wenn ich "
    },
    {
        "start_time": 3191719,
        "end_time": 3200000,
        "text": "unsere App jetzt hier aufmache und hier auf hinzufügen drücke, dann sehe ich, dass hier zu unserem State jetzt zu Items ein neues Element hinzugefügt "
    },
    {
        "start_time": 3200000,
        "end_time": 3205199,
        "text": "wurde und zwar Birnen. Wenn ich auf Äpfel drücke, dann steht hier amount "
    },
    {
        "start_time": 3205199,
        "end_time": 3210440,
        "text": "1 bei Äpfel und so weiter. Das heißt, Elemente, die hinzugefügt werden, werden "
    },
    {
        "start_time": 3210440,
        "end_time": 3214280,
        "text": "jetzt in unserem State immer gespeichert, aber natürlich noch nicht in unserem "
    },
    {
        "start_time": 3214280,
        "end_time": 3219960,
        "text": "Warenkorb angezeigt. Wir müssten jetzt diese Elemente noch an unseren Warenkorb "
    },
    {
        "start_time": 3219960,
        "end_time": 3229159,
        "text": "übergeben. Das heißt, wir müssen in unserem Shopping-Card hier noch sagen, okay, Items gleich und müssten hier jetzt irgendwie auf die Daten von hier "
    },
    {
        "start_time": 3229159,
        "end_time": 3238800,
        "text": "oben zugreifen. Also müssten so was sagen wie this.state.items. Nachdem wir das Ganze gemacht haben, können wir jetzt in unserem Shopping-Card "
    },
    {
        "start_time": 3238800,
        "end_time": 3248239,
        "text": "zugreifen auf unsere Items. Jetzt müssen wir also hier nicht mehr den State oben rausholen, sondern aus den Variablen, die reingegeben wurden in "
    },
    {
        "start_time": 3248239,
        "end_time": 3256599,
        "text": "unsere Komponente. Das heißt, wir sagen hier this.props.items und wenn wir jetzt "
    },
    {
        "start_time": 3256599,
        "end_time": 3262519,
        "text": "hier auf hinzufügen drücken, Tomaten, Gurken, Birnen, Äpfel, sehen wir, dass das "
    },
    {
        "start_time": 3262519,
        "end_time": 3266880,
        "text": "Ganze hier an der Seite zu unserem Warenkorb hinzugefügt wurde. Also unser "
    },
    {
        "start_time": 3266880,
        "end_time": 3271960,
        "text": "Warenkorb bekommt jetzt die Daten aus unserer übergeordneten App-Komponent und "
    },
    {
        "start_time": 3271960,
        "end_time": 3275960,
        "text": "da haben wir jetzt ein Array gespeichert mit verschiedenen Elementen, wo immer im "
    },
    {
        "start_time": 3275960,
        "end_time": 3280320,
        "text": "Mount steht, wo Gurken steht, Birnen steht und so weiter. Und jetzt haben wir "
    },
    {
        "start_time": 3280320,
        "end_time": 3283159,
        "text": "eigentlich noch eine Challenge und zwar zu sagen, dass wenn ich noch mal auf "
    },
    {
        "start_time": 3283159,
        "end_time": 3287559,
        "text": "Birnen drücke, dass hier eine 2x steht und dass wir nicht mehr das Problem haben, "
    },
    {
        "start_time": 3287559,
        "end_time": 3294880,
        "text": "was wir jetzt haben, dass Birnen noch mal hinzugefügt werden und hier deswegen auch sogar ein Fehler angezeigt wird. "
    },
    {
        "start_time": 3296559,
        "end_time": 3301039,
        "text": "Wir haben aktuell noch ein Problem in unserem Warenkorb. Wenn ich ein Element "
    },
    {
        "start_time": 3301039,
        "end_time": 3309519,
        "text": "hinzufüge, sagen wir mal Tomaten, und jetzt noch mal auf hinzufüge, dann kriegen wir ein Problem. Und zwar werden hier die Items einfach zweimal "
    },
    {
        "start_time": 3309519,
        "end_time": 3314000,
        "text": "hinzugefügt. Stattdessen wollen wir aber sagen, dass wenn sich ein Element mit der "
    },
    {
        "start_time": 3314000,
        "end_time": 3319440,
        "text": "Anzahl 1 bereits in unserem Warenkorb befindet, wir das Element nicht noch einmal "
    },
    {
        "start_time": 3319440,
        "end_time": 3324559,
        "text": "hinzufügen wollen, sondern stattdessen lieber diese 1 hier einfach um noch 1 "
    },
    {
        "start_time": 3324559,
        "end_time": 3328840,
        "text": "erhöhen, also auf den Wert 2. Und das Ganze schauen wir uns jetzt einmal an. "
    },
    {
        "start_time": 3328840,
        "end_time": 3332920,
        "text": "Dafür gehen wir in unseren Code und wir sehen hier links oben ja, dass wir hier "
    },
    {
        "start_time": 3332960,
        "end_time": 3342119,
        "text": "die aktuellen Items holen und jetzt einfach jedes Mal, wenn wir auf den Button drücken, ein neues Objekt hier hinzufügen. Stattdessen müssen wir "
    },
    {
        "start_time": 3342119,
        "end_time": 3347000,
        "text": "allerdings sagen, dass wir gucken, ob Tomaten zum Beispiel bereits in unserem "
    },
    {
        "start_time": 3347000,
        "end_time": 3352960,
        "text": "Warenkorb vorhanden sind. Das heißt, wir müssen erst einmal unsere Waren "
    },
    {
        "start_time": 3352960,
        "end_time": 3360280,
        "text": "durchsuchen. Das heißt, ich muss sowas sagen wie let existing item oder sowas. "
    },
    {
        "start_time": 3360279,
        "end_time": 3364800,
        "text": "Und hier muss ich jetzt einfach sagen, dass ich meine Items durchsuche. Das mache ich, "
    },
    {
        "start_time": 3364800,
        "end_time": 3370679,
        "text": "indem ich sage this.state.items.find. Und wir suchen jetzt einfach, ob hier bereits "
    },
    {
        "start_time": 3370679,
        "end_time": 3379119,
        "text": "ein Element, ein Item mit dem Namen vorhanden ist. Das heißt, ich sage item.name "
    },
    {
        "start_time": 3379119,
        "end_time": 3386519,
        "text": "gleich gleich Name. Und wenn dieses Item bereits existiert, dann möchte ich es "
    },
    {
        "start_time": 3386519,
        "end_time": 3393960,
        "text": "einfach erhöhen. Das heißt, ich sage existing item.amount++. Wenn das hingegen "
    },
    {
        "start_time": 3393960,
        "end_time": 3399599,
        "text": "nicht existiert, dann möchte ich es hinzufügen. Das heißt, wir haben jetzt zwei Fälle in "
    },
    {
        "start_time": 3399599,
        "end_time": 3404800,
        "text": "diesem Fall. Fall Nummer eins, wir sagen, das Ganze existiert bereits und Fall "
    },
    {
        "start_time": 3404800,
        "end_time": 3409079,
        "text": "Nummer zwei ist hier unten, es existiert noch nicht. Wenn es nicht existiert, wird "
    },
    {
        "start_time": 3409079,
        "end_time": 3414039,
        "text": "es zum Warenkorb hinzugefügt. Ansonsten haben wir in dieser Variable das Element, "
    },
    {
        "start_time": 3414039,
        "end_time": 3419920,
        "text": "was in unserem Warenkorb gespeichert ist, drin und dann greifen wir darauf zu und erhöhen von "
    },
    {
        "start_time": 3419920,
        "end_time": 3426000,
        "text": "diesem Element aus unserem Warenkorb hier diesen Amount um eins. Schauen wir uns das Ganze mal an. "
    },
    {
        "start_time": 3426000,
        "end_time": 3431599,
        "text": "Ich drücke, nachdem ich neu geladen habe, auf hinzufügen und dann noch mal auf hinzufügen und "
    },
    {
        "start_time": 3431599,
        "end_time": 3436599,
        "text": "sehe, dass hier jetzt immer noch nur ein Element vorhanden ist, aber der Amount hat sich auf zwei "
    },
    {
        "start_time": 3436599,
        "end_time": 3443000,
        "text": "erhöht. Das heißt, jedes Mal haben wir hier jetzt einen anderen Zustand. Wir können hier auch mal "
    },
    {
        "start_time": 3443000,
        "end_time": 3448079,
        "text": "einen sogenannten Debugger hinzufügen. Das mache ich mal in der Zeile davor. Dafür schreibst du "
    },
    {
        "start_time": 3448079,
        "end_time": 3453079,
        "text": "einfach Debugger und dann kann man das Ganze noch mal ein bisschen besser nachvollziehen, "
    },
    {
        "start_time": 3453079,
        "end_time": 3457880,
        "text": "weil das ist nicht ganz einfach. Wenn ich jetzt auf den Button drücke, dann hält unser Code hier "
    },
    {
        "start_time": 3457880,
        "end_time": 3464519,
        "text": "in dieser Zeile, wie wir hier sehen, an. Wenn ich jetzt eine Zeile weitergehe, dafür drücke ich "
    },
    {
        "start_time": 3464519,
        "end_time": 3469639,
        "text": "hier einfach mal unten auf diesen Step, also auf diesen Pfeil und dann noch eine Zeile weiter, "
    },
    {
        "start_time": 3469639,
        "end_time": 3474159,
        "text": "dann sehen wir das in existing item, wenn ich da jetzt rüber gehe oder wenn ich hier einfach mal "
    },
    {
        "start_time": 3474159,
        "end_time": 3478559,
        "text": "das Ding hier ein bisschen größer ziehe, dann sehen wir hier unten an der Seite immer unsere "
    },
    {
        "start_time": 3478559,
        "end_time": 3486679,
        "text": "Variablen und da sehen wir, existing item hat den Wert undefined. Das heißt, eine Ware existiert noch "
    },
    {
        "start_time": 3486679,
        "end_time": 3493199,
        "text": "nicht mit diesem Wert in unserem Warenkorb. Der erste Fall ist also nicht erfüllt und dementsprechend "
    },
    {
        "start_time": 3493199,
        "end_time": 3497679,
        "text": "springen wir jetzt direkt zu dem zweiten Fall. Es läuft also weiter durch. Wir springen hier direkt "
    },
    {
        "start_time": 3497679,
        "end_time": 3503480,
        "text": "runter, wir führen das Ganze aus und führen es in unseren Warenkorb und fügen das da hinzu. Jetzt "
    },
    {
        "start_time": 3503480,
        "end_time": 3509440,
        "text": "führen wir diese Funktion noch mal aus. Ich gehe einfach weiter und sage hinzufügen und jetzt haben "
    },
    {
        "start_time": 3509440,
        "end_time": 3514760,
        "text": "wir eine ähnliche Situation, aber dieses item existiert jetzt bereits. Wenn ich jetzt hier an "
    },
    {
        "start_time": 3514760,
        "end_time": 3518599,
        "text": "der Seite auf existing item gehe, dann sehen wir, dass hier jetzt plötzlich nicht mehr undefined "
    },
    {
        "start_time": 3518599,
        "end_time": 3524599,
        "text": "steht, sondern dass hier das Element aus unserem Warenkorb drin ist mit amount1, name, Tomaten, "
    },
    {
        "start_time": 3524599,
        "end_time": 3530880,
        "text": "price 299. Dementsprechend haben wir jetzt diesen ersten Fall erfüllt und wir gehen jetzt hier rein "
    },
    {
        "start_time": 3530880,
        "end_time": 3536480,
        "text": "und erhöhen den amount und danach gehen wir einfach hier runter, ganz normal, updaten den state und so "
    },
    {
        "start_time": 3536480,
        "end_time": 3540400,
        "text": "weiter und so fort. Was hier ist passiert, ist irgendwelche React-Logik, das interessiert uns "
    },
    {
        "start_time": 3540400,
        "end_time": 3544880,
        "text": "nicht. Jetzt wissen wir auf jeden Fall, dass ich hier draufklicken kann. Den Debugger können wir "
    },
    {
        "start_time": 3544880,
        "end_time": 3549680,
        "text": "jetzt auch wieder rausschmeißen, den nachst du immer nur so zu testen rein und nachdem wir das "
    },
    {
        "start_time": 3549679,
        "end_time": 3554199,
        "text": "ganze gemacht haben, können wir jetzt hier verschiedene Elemente in unseren Warenkorb "
    },
    {
        "start_time": 3554199,
        "end_time": 3559400,
        "text": "hinzufügen und können diese erhöhen. Wenn du das Video bis hierhin geguckt hast, dann hast du jetzt "
    },
    {
        "start_time": 3559400,
        "end_time": 3564480,
        "text": "deine allererste React-App geschrieben. Herzlichen Glückwunsch! Es gibt allerdings noch viel zu tun. "
    },
    {
        "start_time": 3564480,
        "end_time": 3569400,
        "text": "Wie du gemerkt hast, hilft ein einziges Projekt natürlich, um den Einstieg zu finden, aber noch "
    },
    {
        "start_time": 3569400,
        "end_time": 3574159,
        "text": "lange nicht, um React-Projektentwickler zu werden. Dementsprechend musst du jetzt eine Sache machen "
    },
    {
        "start_time": 3574360,
        "end_time": 3579679,
        "text": "und zwar üben, üben, üben. Ich habe dir ein paar einfache Beispiele gezeigt, aber du musst jetzt "
    },
    {
        "start_time": 3579679,
        "end_time": 3584440,
        "text": "noch versuchen, möglichst viele weitere Projekte zu bauen und weitere Funktionalitäten zu "
    },
    {
        "start_time": 3584440,
        "end_time": 3589360,
        "text": "implementieren. Du kannst beispielsweise versuchen, dieses Projekt hier weiterzuführen und im Warenkorb "
    },
    {
        "start_time": 3589360,
        "end_time": 3594599,
        "text": "noch Elemente zu entfernen oder beispielsweise die Anzahl mit zwei Buttons, einen Plus- und "
    },
    {
        "start_time": 3594599,
        "end_time": 3600099,
        "text": "einem Minus-Button zu erhöhen oder zu verringern. Und wenn du jetzt sagst, hey, das Ganze macht mir super sch- "
    },
    {
        "start_time": 3600000,
        "end_time": 3604119,
        "text": "Spaß und ich brauche Unterstützung dabei und ich möchte gerne als Entwickler arbeiten, "
    },
    {
        "start_time": 3604119,
        "end_time": 3608559,
        "text": "bin aber vielleicht noch ganz am Anfang, dann kannst du dich gerne mal über unsere Weiterbildung "
    },
    {
        "start_time": 3608559,
        "end_time": 3613440,
        "text": "informieren, denn wir bilden Softwareentwickler aus, auch Quereinsteiger, das heißt Leute, "
    },
    {
        "start_time": 3613440,
        "end_time": 3616480,
        "text": "die vielleicht vorher noch nie oder nur ganz, ganz wenig gecodet haben. "
    },
    {
        "start_time": 3616480,
        "end_time": 3621000,
        "text": "Wenn dich das Ganze interessiert, dann klick einfach mal auf den Link ganz oben in der YouTube Beschreibung. "
    },
    {
        "start_time": 3621000,
        "end_time": 3627079,
        "text": "Da kannst du dich nicht nur informieren, sondern da kannst du auch ein kostenloses Beratungsgespräch mit mir und meinem Team vereinbaren. "
    },
    {
        "start_time": 3627079,
        "end_time": 3630760,
        "text": "Da können wir einfach mal ganz unverbindlich miteinander reden und schauen, ob wir dir "
    },
    {
        "start_time": 3630760,
        "end_time": 3634559,
        "text": "weiterhelfen können und in welcher Situation wir dich am besten unterstützen können. "
    },
    {
        "start_time": 3634559,
        "end_time": 3640480,
        "text": "Vielleicht sehen wir uns ja schon bald persönlich, ansonsten sehen wir uns hier auf diesem Kanal in einem der nächsten Videos. "
    },
    {
        "start_time": 3640480,
        "end_time": 3642480,
        "text": "Mach's gut, dein Junus, ciao. "
    }
]